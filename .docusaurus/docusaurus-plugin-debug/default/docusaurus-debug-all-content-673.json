{
  "docusaurus-plugin-content-blog": {
    "default": {
      "blogSidebarTitle": "Recent posts",
      "blogPosts": [
        {
          "id": "welcome",
          "metadata": {
            "permalink": "/zh-TW/blog/welcome",
            "source": "@site/blog/2021-08-26-welcome/index.md",
            "title": "Welcome",
            "description": "Docusaurus blogging features are powered by the blog plugin.",
            "date": "2021-08-26T00:00:00.000Z",
            "formattedDate": "2021年8月26日",
            "tags": [
              {
                "label": "facebook",
                "permalink": "/zh-TW/blog/tags/facebook"
              },
              {
                "label": "hello",
                "permalink": "/zh-TW/blog/tags/hello"
              },
              {
                "label": "docusaurus",
                "permalink": "/zh-TW/blog/tags/docusaurus"
              }
            ],
            "readingTime": 0.405,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Sébastien Lorber",
                "title": "Docusaurus maintainer",
                "url": "https://sebastienlorber.com",
                "imageURL": "https://github.com/slorber.png",
                "key": "slorber"
              },
              {
                "name": "Yangshun Tay",
                "title": "Front End Engineer @ Facebook",
                "url": "https://github.com/yangshun",
                "imageURL": "https://github.com/yangshun.png",
                "key": "yangshun"
              }
            ],
            "frontMatter": {
              "slug": "welcome",
              "title": "Welcome",
              "authors": [
                "slorber",
                "yangshun"
              ],
              "tags": [
                "facebook",
                "hello",
                "docusaurus"
              ]
            },
            "nextItem": {
              "title": "MDX Blog Post",
              "permalink": "/zh-TW/blog/mdx-blog-post"
            }
          },
          "content": "[Docusaurus blogging features](https://docusaurus.io/docs/blog) are powered by the [blog plugin](https://docusaurus.io/docs/api/plugins/@docusaurus/plugin-content-blog).\n\nSimply add Markdown files (or folders) to the `blog` directory.\n\nRegular blog authors can be added to `authors.yml`.\n\nThe blog post date can be extracted from filenames, such as:\n\n- `2019-05-30-welcome.md`\n- `2019-05-30-welcome/index.md`\n\nA blog post folder can be convenient to co-locate blog post images:\n\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)\n\nThe blog supports tags as well!\n\n**And if you don't want a blog**: just delete this directory, and use `blog: false` in your Docusaurus config."
        },
        {
          "id": "mdx-blog-post",
          "metadata": {
            "permalink": "/zh-TW/blog/mdx-blog-post",
            "source": "@site/blog/2021-08-01-mdx-blog-post.mdx",
            "title": "MDX Blog Post",
            "description": "Blog posts support Docusaurus Markdown features, such as MDX.",
            "date": "2021-08-01T00:00:00.000Z",
            "formattedDate": "2021年8月1日",
            "tags": [
              {
                "label": "docusaurus",
                "permalink": "/zh-TW/blog/tags/docusaurus"
              }
            ],
            "readingTime": 0.175,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Sébastien Lorber",
                "title": "Docusaurus maintainer",
                "url": "https://sebastienlorber.com",
                "imageURL": "https://github.com/slorber.png",
                "key": "slorber"
              }
            ],
            "frontMatter": {
              "slug": "mdx-blog-post",
              "title": "MDX Blog Post",
              "authors": [
                "slorber"
              ],
              "tags": [
                "docusaurus"
              ]
            },
            "prevItem": {
              "title": "Welcome",
              "permalink": "/zh-TW/blog/welcome"
            },
            "nextItem": {
              "title": "Long Blog Post",
              "permalink": "/zh-TW/blog/long-blog-post"
            }
          },
          "content": "Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\n\n:::tip\n\nUse the power of React to create interactive blog posts.\n\n```js\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n```\n\n<button onClick={() => alert('button clicked!')}>Click me!</button>\n\n:::"
        },
        {
          "id": "long-blog-post",
          "metadata": {
            "permalink": "/zh-TW/blog/long-blog-post",
            "source": "@site/blog/2019-05-29-long-blog-post.md",
            "title": "Long Blog Post",
            "description": "This is the summary of a very long blog post,",
            "date": "2019-05-29T00:00:00.000Z",
            "formattedDate": "2019年5月29日",
            "tags": [
              {
                "label": "hello",
                "permalink": "/zh-TW/blog/tags/hello"
              },
              {
                "label": "docusaurus",
                "permalink": "/zh-TW/blog/tags/docusaurus"
              }
            ],
            "readingTime": 2.05,
            "hasTruncateMarker": true,
            "authors": [
              {
                "name": "Endilie Yacop Sucipto",
                "title": "Maintainer of Docusaurus",
                "url": "https://github.com/endiliey",
                "imageURL": "https://github.com/endiliey.png",
                "key": "endi"
              }
            ],
            "frontMatter": {
              "slug": "long-blog-post",
              "title": "Long Blog Post",
              "authors": "endi",
              "tags": [
                "hello",
                "docusaurus"
              ]
            },
            "prevItem": {
              "title": "MDX Blog Post",
              "permalink": "/zh-TW/blog/mdx-blog-post"
            },
            "nextItem": {
              "title": "First Blog Post",
              "permalink": "/zh-TW/blog/first-blog-post"
            }
          },
          "content": "This is the summary of a very long blog post,\n\nUse a `<!--` `truncate` `-->` comment to limit blog post size in the list view.\n\n<!--truncate-->\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"
        },
        {
          "id": "first-blog-post",
          "metadata": {
            "permalink": "/zh-TW/blog/first-blog-post",
            "source": "@site/blog/2019-05-28-first-blog-post.md",
            "title": "First Blog Post",
            "description": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet",
            "date": "2019-05-28T00:00:00.000Z",
            "formattedDate": "2019年5月28日",
            "tags": [
              {
                "label": "hola",
                "permalink": "/zh-TW/blog/tags/hola"
              },
              {
                "label": "docusaurus",
                "permalink": "/zh-TW/blog/tags/docusaurus"
              }
            ],
            "readingTime": 0.12,
            "hasTruncateMarker": false,
            "authors": [
              {
                "name": "Gao Wei",
                "title": "Docusaurus Core Team",
                "url": "https://github.com/wgao19",
                "image_url": "https://github.com/wgao19.png",
                "imageURL": "https://github.com/wgao19.png"
              }
            ],
            "frontMatter": {
              "slug": "first-blog-post",
              "title": "First Blog Post",
              "authors": {
                "name": "Gao Wei",
                "title": "Docusaurus Core Team",
                "url": "https://github.com/wgao19",
                "image_url": "https://github.com/wgao19.png",
                "imageURL": "https://github.com/wgao19.png"
              },
              "tags": [
                "hola",
                "docusaurus"
              ]
            },
            "prevItem": {
              "title": "Long Blog Post",
              "permalink": "/zh-TW/blog/long-blog-post"
            }
          },
          "content": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"
        }
      ],
      "blogListPaginated": [
        {
          "items": [
            "welcome",
            "mdx-blog-post",
            "long-blog-post",
            "first-blog-post"
          ],
          "metadata": {
            "permalink": "/zh-TW/blog",
            "page": 1,
            "postsPerPage": 10,
            "totalPages": 1,
            "totalCount": 4,
            "blogDescription": "Blog",
            "blogTitle": "Blog"
          }
        }
      ],
      "blogTags": {
        "/zh-TW/blog/tags/facebook": {
          "label": "facebook",
          "items": [
            "welcome"
          ],
          "permalink": "/zh-TW/blog/tags/facebook",
          "pages": [
            {
              "items": [
                "welcome"
              ],
              "metadata": {
                "permalink": "/zh-TW/blog/tags/facebook",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ]
        },
        "/zh-TW/blog/tags/hello": {
          "label": "hello",
          "items": [
            "welcome",
            "long-blog-post"
          ],
          "permalink": "/zh-TW/blog/tags/hello",
          "pages": [
            {
              "items": [
                "welcome",
                "long-blog-post"
              ],
              "metadata": {
                "permalink": "/zh-TW/blog/tags/hello",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 2,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ]
        },
        "/zh-TW/blog/tags/docusaurus": {
          "label": "docusaurus",
          "items": [
            "welcome",
            "mdx-blog-post",
            "long-blog-post",
            "first-blog-post"
          ],
          "permalink": "/zh-TW/blog/tags/docusaurus",
          "pages": [
            {
              "items": [
                "welcome",
                "mdx-blog-post",
                "long-blog-post",
                "first-blog-post"
              ],
              "metadata": {
                "permalink": "/zh-TW/blog/tags/docusaurus",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 4,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ]
        },
        "/zh-TW/blog/tags/hola": {
          "label": "hola",
          "items": [
            "first-blog-post"
          ],
          "permalink": "/zh-TW/blog/tags/hola",
          "pages": [
            {
              "items": [
                "first-blog-post"
              ],
              "metadata": {
                "permalink": "/zh-TW/blog/tags/hola",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 1,
                "blogDescription": "Blog",
                "blogTitle": "Blog"
              }
            }
          ]
        }
      },
      "blogTagsListPath": "/zh-TW/blog/tags"
    },
    "release-note": {
      "blogSidebarTitle": "Version",
      "blogPosts": [
        {
          "id": "v1.1.3",
          "metadata": {
            "permalink": "/zh-TW/release-note/v1.1.3",
            "source": "@site/release-note/v1.1.3.md",
            "title": "v1.1.3",
            "description": "新增",
            "date": "2023-07-13T04:25:34.000Z",
            "formattedDate": "2023年7月13日",
            "tags": [
              {
                "label": "feature",
                "permalink": "/zh-TW/release-note/tags/feature"
              },
              {
                "label": "hotfix",
                "permalink": "/zh-TW/release-note/tags/hotfix"
              }
            ],
            "readingTime": 0.285,
            "hasTruncateMarker": false,
            "authors": [],
            "frontMatter": {
              "slug": "v1.1.3",
              "title": "v1.1.3",
              "tags": [
                "feature",
                "hotfix"
              ]
            },
            "nextItem": {
              "title": "v1.0.0",
              "permalink": "/zh-TW/release-note/v1.0.0"
            }
          },
          "content": "## 新增\n- 新增 付款途徑 名詞介紹\n- 新增 錢包 功能，當付款閘道為 NIUM 時可檢視帳戶內各幣別的餘額\n\n## 修正\n- 修正 圖片顯示不出來\n\n## 移除\n- AML 驗證通知"
        },
        {
          "id": "v1.0.0",
          "metadata": {
            "permalink": "/zh-TW/release-note/v1.0.0",
            "source": "@site/release-note/v1.0.0/index.md",
            "title": "v1.0.0",
            "description": "新增",
            "date": "2023-07-13T04:25:34.000Z",
            "formattedDate": "2023年7月13日",
            "tags": [
              {
                "label": "feature",
                "permalink": "/zh-TW/release-note/tags/feature"
              },
              {
                "label": "hotfix",
                "permalink": "/zh-TW/release-note/tags/hotfix"
              }
            ],
            "readingTime": 0.315,
            "hasTruncateMarker": false,
            "authors": [],
            "frontMatter": {
              "slug": "v1.0.0",
              "title": "v1.0.0",
              "tags": [
                "feature",
                "hotfix"
              ]
            },
            "prevItem": {
              "title": "v1.1.3",
              "permalink": "/zh-TW/release-note/v1.1.3"
            }
          },
          "content": "## 新增\n- 新增 付款途徑 名詞介紹\n- 新增 錢包 功能，當付款閘道為 NIUM 時可檢視帳戶內各幣別的餘額\n\n## 修正\n- 修正 圖片顯示不出來\n\n## 移除\n- AML 驗證通知\n\n# 畫面預覽\n![Docusaurus Plushie](./docusaurus-plushie-banner.jpeg)"
        }
      ],
      "blogListPaginated": [
        {
          "items": [
            "v1.1.3",
            "v1.0.0"
          ],
          "metadata": {
            "permalink": "/zh-TW/release-note",
            "page": 1,
            "postsPerPage": 10,
            "totalPages": 1,
            "totalCount": 2,
            "blogDescription": "Blog",
            "blogTitle": "Release Note"
          }
        }
      ],
      "blogTags": {
        "/zh-TW/release-note/tags/feature": {
          "label": "feature",
          "items": [
            "v1.1.3",
            "v1.0.0"
          ],
          "permalink": "/zh-TW/release-note/tags/feature",
          "pages": [
            {
              "items": [
                "v1.1.3",
                "v1.0.0"
              ],
              "metadata": {
                "permalink": "/zh-TW/release-note/tags/feature",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 2,
                "blogDescription": "Blog",
                "blogTitle": "Release Note"
              }
            }
          ]
        },
        "/zh-TW/release-note/tags/hotfix": {
          "label": "hotfix",
          "items": [
            "v1.1.3",
            "v1.0.0"
          ],
          "permalink": "/zh-TW/release-note/tags/hotfix",
          "pages": [
            {
              "items": [
                "v1.1.3",
                "v1.0.0"
              ],
              "metadata": {
                "permalink": "/zh-TW/release-note/tags/hotfix",
                "page": 1,
                "postsPerPage": 10,
                "totalPages": 1,
                "totalCount": 2,
                "blogDescription": "Blog",
                "blogTitle": "Release Note"
              }
            }
          ]
        }
      },
      "blogTagsListPath": "/zh-TW/release-note/tags"
    }
  },
  "docusaurus-plugin-content-pages": {
    "default": [
      {
        "type": "jsx",
        "permalink": "/zh-TW/",
        "source": "@site/src/pages/index.js"
      },
      {
        "type": "mdx",
        "permalink": "/zh-TW/markdown-page",
        "source": "@site/src/pages/markdown-page.md",
        "title": "Markdown page example",
        "description": "You don't need React to write simple standalone pages.",
        "frontMatter": {
          "title": "Markdown page example"
        }
      }
    ]
  },
  "docusaurus-plugin-debug": {},
  "docusaurus-plugin-openapi": {
    "default": {
      "loadedApi": [
        {
          "type": "info",
          "id": "introduction",
          "unversionedId": "introduction",
          "title": "Introduction",
          "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
          "slug": "/introduction",
          "frontMatter": {},
          "info": {
            "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
            "version": "1.0.0",
            "title": "Swagger Petstore YAML",
            "termsOfService": "http://swagger.io/terms/",
            "contact": {
              "name": "API Support",
              "email": "apiteam@swagger.io",
              "url": "https://github.com/Redocly/redoc"
            },
            "x-logo": {
              "url": "https://redocly.github.io/redoc/petstore-logo.png",
              "altText": "Petstore logo"
            },
            "license": {
              "name": "Apache 2.0",
              "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/introduction",
          "next": {
            "title": "Add a new pet to the store",
            "permalink": "/zh-TW/api/add-a-new-pet-to-the-store"
          }
        },
        {
          "type": "api",
          "id": "add-a-new-pet-to-the-store",
          "unversionedId": "add-a-new-pet-to-the-store",
          "title": "Add a new pet to the store",
          "description": "",
          "slug": "/add-a-new-pet-to-the-store",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "Add new pet to the store inventory.",
            "operationId": "addPet",
            "responses": {
              "405": {
                "description": "Invalid input"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "x-codeSamples": [
              {
                "lang": "C#",
                "source": "PetStore.v1.Pet pet = new PetStore.v1.Pet();\npet.setApiKey(\"your api key\");\npet.petType = PetStore.v1.Pet.TYPE_DOG;\npet.name = \"Rex\";\n// set other fields\nPetStoreResponse response = pet.create();\nif (response.statusCode == HttpStatusCode.Created)\n{\n  // Successfully created\n}\nelse\n{\n  // Something wrong -- check response for errors\n  Console.WriteLine(response.getRawResponse());\n}\n"
              },
              {
                "lang": "PHP",
                "source": "$form = new \\PetStore\\Entities\\Pet();\n$form->setPetType(\"Dog\");\n$form->setName(\"Rex\");\n// set other fields\ntry {\n    $pet = $client->pets()->create($form);\n} catch (UnprocessableEntityException $e) {\n    var_dump($e->getErrors());\n}\n"
              }
            ],
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "description": "My Pet",
                    "title": "Pettie",
                    "type": "object",
                    "required": [
                      "name",
                      "photoUrls"
                    ],
                    "discriminator": {
                      "propertyName": "petType",
                      "mapping": {
                        "cat": "#/components/schemas/Cat",
                        "dog": "#/components/schemas/Dog",
                        "bee": "#/components/schemas/HoneyBee"
                      }
                    },
                    "properties": {
                      "id": {
                        "externalDocs": {
                          "description": "Find more info here",
                          "url": "https://example.com"
                        },
                        "description": "Pet ID",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "category": {
                        "description": "Categories this pet belongs to",
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Category ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "name": {
                            "description": "Category name",
                            "type": "string",
                            "minLength": 1
                          },
                          "sub": {
                            "description": "Test Sub Category",
                            "type": "object",
                            "properties": {
                              "prop1": {
                                "type": "string",
                                "description": "Dumb Property"
                              }
                            }
                          }
                        },
                        "xml": {
                          "name": "Category"
                        }
                      },
                      "name": {
                        "description": "The name given to a pet",
                        "type": "string",
                        "example": "Guru"
                      },
                      "photoUrls": {
                        "description": "The list of URL to a cute photos featuring pet",
                        "type": "array",
                        "maxItems": 20,
                        "xml": {
                          "name": "photoUrl",
                          "wrapped": true
                        },
                        "items": {
                          "type": "string",
                          "format": "url"
                        }
                      },
                      "friend": {
                        "$ref": "#/components/schemas/Pet"
                      },
                      "tags": {
                        "description": "Tags attached to the pet",
                        "type": "array",
                        "minItems": 1,
                        "xml": {
                          "name": "tag",
                          "wrapped": true
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Tag ID",
                              "type": "integer",
                              "format": "int64",
                              "readOnly": true
                            },
                            "name": {
                              "description": "Tag name",
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "xml": {
                            "name": "Tag"
                          }
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "Pet status in the store",
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ]
                      },
                      "petType": {
                        "description": "Type of a pet",
                        "type": "string"
                      }
                    },
                    "xml": {
                      "name": "Pet"
                    }
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "hooray"
                      }
                    }
                  }
                }
              },
              "description": "Pet object that needs to be added to the store",
              "required": true
            },
            "method": "post",
            "path": "/pet",
            "parameters": [
              {
                "name": "Accept-Language",
                "in": "header",
                "description": "The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US",
                "example": "en-US",
                "required": false,
                "schema": {
                  "type": "string",
                  "default": "en-AU"
                }
              },
              {
                "name": "cookieParam",
                "in": "cookie",
                "description": "Some cookie",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "id": 0,
              "category": {
                "id": 0,
                "name": "string",
                "sub": {
                  "prop1": "string"
                }
              },
              "name": "Guru",
              "photoUrls": [
                "string"
              ],
              "tags": [
                {
                  "id": 0,
                  "name": "string"
                }
              ],
              "status": "available",
              "petType": "string"
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Add a new pet to the store",
              "description": {
                "content": "Add new pet to the store inventory.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "description": {
                    "content": "The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US",
                    "type": "text/plain"
                  },
                  "key": "Accept-Language",
                  "value": "en-AU"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n        \"<url>\",\n        \"<url>\"\n    ],\n    \"category\": {\n        \"name\": \"<string>\",\n        \"sub\": {\n            \"prop1\": \"<string>\"\n        }\n    },\n    \"friend\": {\n        \"name\": \"<string>\",\n        \"photoUrls\": [\n            \"<url>\",\n            \"<url>\"\n        ],\n        \"category\": {\n            \"name\": \"<string>\",\n            \"sub\": {\n                \"prop1\": \"<string>\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"name\": \"<string>\"\n            }\n        ],\n        \"status\": \"<string>\",\n        \"petType\": \"<string>\"\n    },\n    \"tags\": [\n        {\n            \"name\": \"<string>\"\n        }\n    ],\n    \"status\": \"<string>\",\n    \"petType\": \"<string>\"\n}"
              },
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/add-a-new-pet-to-the-store",
          "previous": {
            "title": "Introduction",
            "permalink": "/zh-TW/api/introduction"
          },
          "next": {
            "title": "Update an existing pet",
            "permalink": "/zh-TW/api/update-an-existing-pet"
          }
        },
        {
          "type": "api",
          "id": "update-an-existing-pet",
          "unversionedId": "update-an-existing-pet",
          "title": "Update an existing pet",
          "description": "",
          "slug": "/update-an-existing-pet",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "",
            "operationId": "updatePet",
            "responses": {
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Pet not found"
              },
              "405": {
                "description": "Validation exception"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "x-codeSamples": [
              {
                "lang": "PHP",
                "source": "$form = new \\PetStore\\Entities\\Pet();\n$form->setPetId(1);\n$form->setPetType(\"Dog\");\n$form->setName(\"Rex\");\n// set other fields\ntry {\n    $pet = $client->pets()->update($form);\n} catch (UnprocessableEntityException $e) {\n    var_dump($e->getErrors());\n}\n"
              }
            ],
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "description": "My Pet",
                    "title": "Pettie",
                    "type": "object",
                    "required": [
                      "name",
                      "photoUrls"
                    ],
                    "discriminator": {
                      "propertyName": "petType",
                      "mapping": {
                        "cat": "#/components/schemas/Cat",
                        "dog": "#/components/schemas/Dog",
                        "bee": "#/components/schemas/HoneyBee"
                      }
                    },
                    "properties": {
                      "id": {
                        "externalDocs": {
                          "description": "Find more info here",
                          "url": "https://example.com"
                        },
                        "description": "Pet ID",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "category": {
                        "description": "Categories this pet belongs to",
                        "type": "object",
                        "properties": {
                          "id": {
                            "description": "Category ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "name": {
                            "description": "Category name",
                            "type": "string",
                            "minLength": 1
                          },
                          "sub": {
                            "description": "Test Sub Category",
                            "type": "object",
                            "properties": {
                              "prop1": {
                                "type": "string",
                                "description": "Dumb Property"
                              }
                            }
                          }
                        },
                        "xml": {
                          "name": "Category"
                        }
                      },
                      "name": {
                        "description": "The name given to a pet",
                        "type": "string",
                        "example": "Guru"
                      },
                      "photoUrls": {
                        "description": "The list of URL to a cute photos featuring pet",
                        "type": "array",
                        "maxItems": 20,
                        "xml": {
                          "name": "photoUrl",
                          "wrapped": true
                        },
                        "items": {
                          "type": "string",
                          "format": "url"
                        }
                      },
                      "friend": {
                        "$ref": "#/components/schemas/Pet"
                      },
                      "tags": {
                        "description": "Tags attached to the pet",
                        "type": "array",
                        "minItems": 1,
                        "xml": {
                          "name": "tag",
                          "wrapped": true
                        },
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Tag ID",
                              "type": "integer",
                              "format": "int64",
                              "readOnly": true
                            },
                            "name": {
                              "description": "Tag name",
                              "type": "string",
                              "minLength": 1
                            }
                          },
                          "xml": {
                            "name": "Tag"
                          }
                        }
                      },
                      "status": {
                        "type": "string",
                        "description": "Pet status in the store",
                        "enum": [
                          "available",
                          "pending",
                          "sold"
                        ]
                      },
                      "petType": {
                        "description": "Type of a pet",
                        "type": "string"
                      }
                    },
                    "xml": {
                      "name": "Pet"
                    }
                  }
                },
                "application/xml": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "hooray"
                      }
                    }
                  }
                }
              },
              "description": "Pet object that needs to be added to the store",
              "required": true
            },
            "method": "put",
            "path": "/pet",
            "parameters": [
              {
                "name": "Accept-Language",
                "in": "header",
                "description": "The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US",
                "example": "en-US",
                "required": false,
                "schema": {
                  "type": "string",
                  "default": "en-AU"
                }
              },
              {
                "name": "cookieParam",
                "in": "cookie",
                "description": "Some cookie",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "id": 0,
              "category": {
                "id": 0,
                "name": "string",
                "sub": {
                  "prop1": "string"
                }
              },
              "name": "Guru",
              "photoUrls": [
                "string"
              ],
              "tags": [
                {
                  "id": 0,
                  "name": "string"
                }
              ],
              "status": "available",
              "petType": "string"
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Update an existing pet",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "description": {
                    "content": "The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US",
                    "type": "text/plain"
                  },
                  "key": "Accept-Language",
                  "value": "en-AU"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"name\": \"<string>\",\n    \"photoUrls\": [\n        \"<url>\",\n        \"<url>\"\n    ],\n    \"category\": {\n        \"name\": \"<string>\",\n        \"sub\": {\n            \"prop1\": \"<string>\"\n        }\n    },\n    \"friend\": {\n        \"name\": \"<string>\",\n        \"photoUrls\": [\n            \"<url>\",\n            \"<url>\"\n        ],\n        \"category\": {\n            \"name\": \"<string>\",\n            \"sub\": {\n                \"prop1\": \"<string>\"\n            }\n        },\n        \"friend\": {\n            \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n        },\n        \"tags\": [\n            {\n                \"name\": \"<string>\"\n            }\n        ],\n        \"status\": \"<string>\",\n        \"petType\": \"<string>\"\n    },\n    \"tags\": [\n        {\n            \"name\": \"<string>\"\n        }\n    ],\n    \"status\": \"<string>\",\n    \"petType\": \"<string>\"\n}"
              },
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/update-an-existing-pet",
          "previous": {
            "title": "Add a new pet to the store",
            "permalink": "/zh-TW/api/add-a-new-pet-to-the-store"
          },
          "next": {
            "title": "Find pet by ID",
            "permalink": "/zh-TW/api/find-pet-by-id"
          }
        },
        {
          "type": "api",
          "id": "find-pet-by-id",
          "unversionedId": "find-pet-by-id",
          "title": "Find pet by ID",
          "description": "",
          "slug": "/find-pet-by-id",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "Returns a single pet",
            "operationId": "getPetById",
            "parameters": [
              {
                "name": "petId",
                "in": "path",
                "description": "ID of pet to return",
                "required": true,
                "deprecated": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "name",
                        "photoUrls"
                      ],
                      "discriminator": {
                        "propertyName": "petType",
                        "mapping": {
                          "cat": "#/components/schemas/Cat",
                          "dog": "#/components/schemas/Dog",
                          "bee": "#/components/schemas/HoneyBee"
                        }
                      },
                      "properties": {
                        "id": {
                          "externalDocs": {
                            "description": "Find more info here",
                            "url": "https://example.com"
                          },
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "category": {
                          "description": "Categories this pet belongs to",
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Category ID",
                              "type": "integer",
                              "format": "int64",
                              "readOnly": true
                            },
                            "name": {
                              "description": "Category name",
                              "type": "string",
                              "minLength": 1
                            },
                            "sub": {
                              "description": "Test Sub Category",
                              "type": "object",
                              "properties": {
                                "prop1": {
                                  "type": "string",
                                  "description": "Dumb Property"
                                }
                              }
                            }
                          },
                          "xml": {
                            "name": "Category"
                          }
                        },
                        "name": {
                          "description": "The name given to a pet",
                          "type": "string",
                          "example": "Guru"
                        },
                        "photoUrls": {
                          "description": "The list of URL to a cute photos featuring pet",
                          "type": "array",
                          "maxItems": 20,
                          "xml": {
                            "name": "photoUrl",
                            "wrapped": true
                          },
                          "items": {
                            "type": "string",
                            "format": "url"
                          }
                        },
                        "friend": {
                          "$ref": "#/components/schemas/Pet"
                        },
                        "tags": {
                          "description": "Tags attached to the pet",
                          "type": "array",
                          "minItems": 1,
                          "xml": {
                            "name": "tag",
                            "wrapped": true
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Tag ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Tag name",
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "xml": {
                              "name": "Tag"
                            }
                          }
                        },
                        "status": {
                          "type": "string",
                          "description": "Pet status in the store",
                          "enum": [
                            "available",
                            "pending",
                            "sold"
                          ]
                        },
                        "petType": {
                          "description": "Type of a pet",
                          "type": "string"
                        }
                      },
                      "xml": {
                        "name": "Pet"
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "object",
                      "required": [
                        "name",
                        "photoUrls"
                      ],
                      "discriminator": {
                        "propertyName": "petType",
                        "mapping": {
                          "cat": "#/components/schemas/Cat",
                          "dog": "#/components/schemas/Dog",
                          "bee": "#/components/schemas/HoneyBee"
                        }
                      },
                      "properties": {
                        "id": {
                          "externalDocs": {
                            "description": "Find more info here",
                            "url": "https://example.com"
                          },
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "category": {
                          "description": "Categories this pet belongs to",
                          "type": "object",
                          "properties": {
                            "id": {
                              "description": "Category ID",
                              "type": "integer",
                              "format": "int64",
                              "readOnly": true
                            },
                            "name": {
                              "description": "Category name",
                              "type": "string",
                              "minLength": 1
                            },
                            "sub": {
                              "description": "Test Sub Category",
                              "type": "object",
                              "properties": {
                                "prop1": {
                                  "type": "string",
                                  "description": "Dumb Property"
                                }
                              }
                            }
                          },
                          "xml": {
                            "name": "Category"
                          }
                        },
                        "name": {
                          "description": "The name given to a pet",
                          "type": "string",
                          "example": "Guru"
                        },
                        "photoUrls": {
                          "description": "The list of URL to a cute photos featuring pet",
                          "type": "array",
                          "maxItems": 20,
                          "xml": {
                            "name": "photoUrl",
                            "wrapped": true
                          },
                          "items": {
                            "type": "string",
                            "format": "url"
                          }
                        },
                        "friend": {
                          "$ref": "#/components/schemas/Pet"
                        },
                        "tags": {
                          "description": "Tags attached to the pet",
                          "type": "array",
                          "minItems": 1,
                          "xml": {
                            "name": "tag",
                            "wrapped": true
                          },
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Tag ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Tag name",
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "xml": {
                              "name": "Tag"
                            }
                          }
                        },
                        "status": {
                          "type": "string",
                          "description": "Pet status in the store",
                          "enum": [
                            "available",
                            "pending",
                            "sold"
                          ]
                        },
                        "petType": {
                          "description": "Type of a pet",
                          "type": "string"
                        }
                      },
                      "xml": {
                        "name": "Pet"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Pet not found"
              }
            },
            "security": [
              {
                "api_key": []
              }
            ],
            "method": "get",
            "path": "/pet/{petId}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Find pet by ID",
              "description": {
                "content": "Returns a single pet",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  ":petId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ID of pet to return",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<long>",
                    "key": "petId"
                  }
                ]
              },
              "method": "GET",
              "auth": {
                "type": "apikey",
                "apikey": [
                  {
                    "type": "any",
                    "value": "api_key",
                    "key": "key"
                  },
                  {
                    "type": "any",
                    "value": true,
                    "key": "value"
                  },
                  {
                    "type": "any",
                    "value": "header",
                    "key": "in"
                  }
                ]
              }
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/find-pet-by-id",
          "previous": {
            "title": "Update an existing pet",
            "permalink": "/zh-TW/api/update-an-existing-pet"
          },
          "next": {
            "title": "Updates a pet in the store with form data",
            "permalink": "/zh-TW/api/updates-a-pet-in-the-store-with-form-data"
          }
        },
        {
          "type": "api",
          "id": "updates-a-pet-in-the-store-with-form-data",
          "unversionedId": "updates-a-pet-in-the-store-with-form-data",
          "title": "Updates a pet in the store with form data",
          "description": "",
          "slug": "/updates-a-pet-in-the-store-with-form-data",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "",
            "operationId": "updatePetWithForm",
            "parameters": [
              {
                "name": "petId",
                "in": "path",
                "description": "ID of pet that needs to be updated",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "responses": {
              "405": {
                "description": "Invalid input"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "requestBody": {
              "content": {
                "application/x-www-form-urlencoded": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "description": "Updated name of the pet",
                        "type": "string"
                      },
                      "status": {
                        "description": "Updated status of the pet",
                        "type": "string"
                      }
                    }
                  }
                }
              }
            },
            "method": "post",
            "path": "/pet/{petId}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Updates a pet in the store with form data",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  ":petId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ID of pet that needs to be updated",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<long>",
                    "key": "petId"
                  }
                ]
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/x-www-form-urlencoded"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "description": {
                      "content": "Updated name of the pet",
                      "type": "text/plain"
                    },
                    "key": "name",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "Updated status of the pet",
                      "type": "text/plain"
                    },
                    "key": "status",
                    "value": "<string>"
                  }
                ]
              },
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/updates-a-pet-in-the-store-with-form-data",
          "previous": {
            "title": "Find pet by ID",
            "permalink": "/zh-TW/api/find-pet-by-id"
          },
          "next": {
            "title": "Deletes a pet",
            "permalink": "/zh-TW/api/deletes-a-pet"
          }
        },
        {
          "type": "api",
          "id": "deletes-a-pet",
          "unversionedId": "deletes-a-pet",
          "title": "Deletes a pet",
          "description": "",
          "slug": "/deletes-a-pet",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "",
            "operationId": "deletePet",
            "parameters": [
              {
                "name": "api_key",
                "in": "header",
                "required": false,
                "schema": {
                  "type": "string"
                },
                "example": "Bearer <TOKEN>"
              },
              {
                "name": "petId",
                "in": "path",
                "description": "Pet id to delete",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "responses": {
              "400": {
                "description": "Invalid pet value"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "method": "delete",
            "path": "/pet/{petId}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Deletes a pet",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  ":petId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) Pet id to delete",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<long>",
                    "key": "petId"
                  }
                ]
              },
              "header": [
                {
                  "description": {
                    "content": "",
                    "type": "text/plain"
                  },
                  "key": "api_key",
                  "value": "<string>"
                }
              ],
              "method": "DELETE",
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/deletes-a-pet",
          "previous": {
            "title": "Updates a pet in the store with form data",
            "permalink": "/zh-TW/api/updates-a-pet-in-the-store-with-form-data"
          },
          "next": {
            "title": "uploads an image",
            "permalink": "/zh-TW/api/uploads-an-image"
          }
        },
        {
          "type": "api",
          "id": "uploads-an-image",
          "unversionedId": "uploads-an-image",
          "title": "uploads an image",
          "description": "",
          "slug": "/uploads-an-image",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "",
            "operationId": "uploadFile",
            "parameters": [
              {
                "name": "petId",
                "in": "path",
                "description": "ID of pet to update",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "code": {
                          "type": "integer",
                          "format": "int32"
                        },
                        "type": {
                          "type": "string"
                        },
                        "message": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "requestBody": {
              "content": {
                "application/octet-stream": {
                  "schema": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            },
            "method": "post",
            "path": "/pet/{petId}/uploadImage",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "uploads an image",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  ":petId",
                  "uploadImage"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ID of pet to update",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<long>",
                    "key": "petId"
                  }
                ]
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/octet-stream"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "\"<binary>\""
              },
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/uploads-an-image",
          "previous": {
            "title": "Deletes a pet",
            "permalink": "/zh-TW/api/deletes-a-pet"
          },
          "next": {
            "title": "Finds Pets by status",
            "permalink": "/zh-TW/api/finds-pets-by-status"
          }
        },
        {
          "type": "api",
          "id": "finds-pets-by-status",
          "unversionedId": "finds-pets-by-status",
          "title": "Finds Pets by status",
          "description": "",
          "slug": "/finds-pets-by-status",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "Multiple status values can be provided with comma separated strings",
            "operationId": "findPetsByStatus",
            "parameters": [
              {
                "name": "status",
                "in": "query",
                "description": "Status values that need to be considered for filter",
                "required": true,
                "style": "form",
                "schema": {
                  "type": "array",
                  "minItems": 1,
                  "maxItems": 3,
                  "items": {
                    "type": "string",
                    "enum": [
                      "available",
                      "pending",
                      "sold"
                    ],
                    "default": "available"
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "discriminator": {
                          "propertyName": "petType",
                          "mapping": {
                            "cat": "#/components/schemas/Cat",
                            "dog": "#/components/schemas/Dog",
                            "bee": "#/components/schemas/HoneyBee"
                          }
                        },
                        "properties": {
                          "id": {
                            "externalDocs": {
                              "description": "Find more info here",
                              "url": "https://example.com"
                            },
                            "description": "Pet ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "category": {
                            "description": "Categories this pet belongs to",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Category ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Category name",
                                "type": "string",
                                "minLength": 1
                              },
                              "sub": {
                                "description": "Test Sub Category",
                                "type": "object",
                                "properties": {
                                  "prop1": {
                                    "type": "string",
                                    "description": "Dumb Property"
                                  }
                                }
                              }
                            },
                            "xml": {
                              "name": "Category"
                            }
                          },
                          "name": {
                            "description": "The name given to a pet",
                            "type": "string",
                            "example": "Guru"
                          },
                          "photoUrls": {
                            "description": "The list of URL to a cute photos featuring pet",
                            "type": "array",
                            "maxItems": 20,
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string",
                              "format": "url"
                            }
                          },
                          "friend": {
                            "$ref": "#/components/schemas/Pet"
                          },
                          "tags": {
                            "description": "Tags attached to the pet",
                            "type": "array",
                            "minItems": 1,
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "Pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          },
                          "petType": {
                            "description": "Type of a pet",
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        }
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "discriminator": {
                          "propertyName": "petType",
                          "mapping": {
                            "cat": "#/components/schemas/Cat",
                            "dog": "#/components/schemas/Dog",
                            "bee": "#/components/schemas/HoneyBee"
                          }
                        },
                        "properties": {
                          "id": {
                            "externalDocs": {
                              "description": "Find more info here",
                              "url": "https://example.com"
                            },
                            "description": "Pet ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "category": {
                            "description": "Categories this pet belongs to",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Category ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Category name",
                                "type": "string",
                                "minLength": 1
                              },
                              "sub": {
                                "description": "Test Sub Category",
                                "type": "object",
                                "properties": {
                                  "prop1": {
                                    "type": "string",
                                    "description": "Dumb Property"
                                  }
                                }
                              }
                            },
                            "xml": {
                              "name": "Category"
                            }
                          },
                          "name": {
                            "description": "The name given to a pet",
                            "type": "string",
                            "example": "Guru"
                          },
                          "photoUrls": {
                            "description": "The list of URL to a cute photos featuring pet",
                            "type": "array",
                            "maxItems": 20,
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string",
                              "format": "url"
                            }
                          },
                          "friend": {
                            "$ref": "#/components/schemas/Pet"
                          },
                          "tags": {
                            "description": "Tags attached to the pet",
                            "type": "array",
                            "minItems": 1,
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "Pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          },
                          "petType": {
                            "description": "Type of a pet",
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid status value"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "method": "get",
            "path": "/pet/findByStatus",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Finds Pets by status",
              "description": {
                "content": "Multiple status values can be provided with comma separated strings",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  "findByStatus"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "description": {
                      "content": "(Required) Status values that need to be considered for filter",
                      "type": "text/plain"
                    },
                    "key": "status",
                    "value": "available"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/finds-pets-by-status",
          "previous": {
            "title": "uploads an image",
            "permalink": "/zh-TW/api/uploads-an-image"
          },
          "next": {
            "title": "Finds Pets by tags",
            "permalink": "/zh-TW/api/finds-pets-by-tags"
          }
        },
        {
          "type": "api",
          "id": "finds-pets-by-tags",
          "unversionedId": "finds-pets-by-tags",
          "title": "Finds Pets by tags",
          "description": "",
          "slug": "/finds-pets-by-tags",
          "frontMatter": {},
          "api": {
            "tags": [
              "pet"
            ],
            "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
            "operationId": "findPetsByTags",
            "deprecated": true,
            "parameters": [
              {
                "name": "tags",
                "in": "query",
                "description": "Tags to filter by",
                "required": true,
                "style": "form",
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "discriminator": {
                          "propertyName": "petType",
                          "mapping": {
                            "cat": "#/components/schemas/Cat",
                            "dog": "#/components/schemas/Dog",
                            "bee": "#/components/schemas/HoneyBee"
                          }
                        },
                        "properties": {
                          "id": {
                            "externalDocs": {
                              "description": "Find more info here",
                              "url": "https://example.com"
                            },
                            "description": "Pet ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "category": {
                            "description": "Categories this pet belongs to",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Category ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Category name",
                                "type": "string",
                                "minLength": 1
                              },
                              "sub": {
                                "description": "Test Sub Category",
                                "type": "object",
                                "properties": {
                                  "prop1": {
                                    "type": "string",
                                    "description": "Dumb Property"
                                  }
                                }
                              }
                            },
                            "xml": {
                              "name": "Category"
                            }
                          },
                          "name": {
                            "description": "The name given to a pet",
                            "type": "string",
                            "example": "Guru"
                          },
                          "photoUrls": {
                            "description": "The list of URL to a cute photos featuring pet",
                            "type": "array",
                            "maxItems": 20,
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string",
                              "format": "url"
                            }
                          },
                          "friend": {
                            "$ref": "#/components/schemas/Pet"
                          },
                          "tags": {
                            "description": "Tags attached to the pet",
                            "type": "array",
                            "minItems": 1,
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "Pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          },
                          "petType": {
                            "description": "Type of a pet",
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        }
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "required": [
                          "name",
                          "photoUrls"
                        ],
                        "discriminator": {
                          "propertyName": "petType",
                          "mapping": {
                            "cat": "#/components/schemas/Cat",
                            "dog": "#/components/schemas/Dog",
                            "bee": "#/components/schemas/HoneyBee"
                          }
                        },
                        "properties": {
                          "id": {
                            "externalDocs": {
                              "description": "Find more info here",
                              "url": "https://example.com"
                            },
                            "description": "Pet ID",
                            "type": "integer",
                            "format": "int64",
                            "readOnly": true
                          },
                          "category": {
                            "description": "Categories this pet belongs to",
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Category ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Category name",
                                "type": "string",
                                "minLength": 1
                              },
                              "sub": {
                                "description": "Test Sub Category",
                                "type": "object",
                                "properties": {
                                  "prop1": {
                                    "type": "string",
                                    "description": "Dumb Property"
                                  }
                                }
                              }
                            },
                            "xml": {
                              "name": "Category"
                            }
                          },
                          "name": {
                            "description": "The name given to a pet",
                            "type": "string",
                            "example": "Guru"
                          },
                          "photoUrls": {
                            "description": "The list of URL to a cute photos featuring pet",
                            "type": "array",
                            "maxItems": 20,
                            "xml": {
                              "name": "photoUrl",
                              "wrapped": true
                            },
                            "items": {
                              "type": "string",
                              "format": "url"
                            }
                          },
                          "friend": {
                            "$ref": "#/components/schemas/Pet"
                          },
                          "tags": {
                            "description": "Tags attached to the pet",
                            "type": "array",
                            "minItems": 1,
                            "xml": {
                              "name": "tag",
                              "wrapped": true
                            },
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          },
                          "status": {
                            "type": "string",
                            "description": "Pet status in the store",
                            "enum": [
                              "available",
                              "pending",
                              "sold"
                            ]
                          },
                          "petType": {
                            "description": "Type of a pet",
                            "type": "string"
                          }
                        },
                        "xml": {
                          "name": "Pet"
                        }
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid tag value"
              }
            },
            "security": [
              {
                "petstore_auth": [
                  "write:pets",
                  "read:pets"
                ]
              }
            ],
            "method": "get",
            "path": "/pet/findByTags",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Finds Pets by tags",
              "description": {
                "content": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "pet",
                  "findByTags"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "description": {
                      "content": "(Required) Tags to filter by",
                      "type": "text/plain"
                    },
                    "key": "tags",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "(Required) Tags to filter by",
                      "type": "text/plain"
                    },
                    "key": "tags",
                    "value": "<string>"
                  }
                ],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "oauth2",
                "oauth2": []
              }
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/finds-pets-by-tags",
          "previous": {
            "title": "Finds Pets by status",
            "permalink": "/zh-TW/api/finds-pets-by-status"
          },
          "next": {
            "title": "Returns pet inventories by status",
            "permalink": "/zh-TW/api/returns-pet-inventories-by-status"
          }
        },
        {
          "type": "api",
          "id": "returns-pet-inventories-by-status",
          "unversionedId": "returns-pet-inventories-by-status",
          "title": "Returns pet inventories by status",
          "description": "",
          "slug": "/returns-pet-inventories-by-status",
          "frontMatter": {},
          "api": {
            "tags": [
              "Petstore orders"
            ],
            "description": "Returns a map of status codes to quantities",
            "operationId": "getInventory",
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "additionalProperties": {
                        "type": "integer",
                        "format": "int32"
                      }
                    }
                  }
                }
              }
            },
            "security": [
              {
                "api_key": []
              }
            ],
            "method": "get",
            "path": "/store/inventory",
            "parameters": [],
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Returns pet inventories by status",
              "description": {
                "content": "Returns a map of status codes to quantities",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "store",
                  "inventory"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET",
              "auth": {
                "type": "apikey",
                "apikey": [
                  {
                    "type": "any",
                    "value": "api_key",
                    "key": "key"
                  },
                  {
                    "type": "any",
                    "value": true,
                    "key": "value"
                  },
                  {
                    "type": "any",
                    "value": "header",
                    "key": "in"
                  }
                ]
              }
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/returns-pet-inventories-by-status",
          "previous": {
            "title": "Finds Pets by tags",
            "permalink": "/zh-TW/api/finds-pets-by-tags"
          },
          "next": {
            "title": "Place an order for a pet",
            "permalink": "/zh-TW/api/place-an-order-for-a-pet"
          }
        },
        {
          "type": "api",
          "id": "place-an-order-for-a-pet",
          "unversionedId": "place-an-order-for-a-pet",
          "title": "Place an order for a pet",
          "description": "",
          "slug": "/place-an-order-for-a-pet",
          "frontMatter": {},
          "api": {
            "tags": [
              "Petstore orders"
            ],
            "description": "",
            "operationId": "placeOrder",
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Order ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "petId": {
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "quantity": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "default": 1
                        },
                        "shipDate": {
                          "description": "Estimated ship date",
                          "type": "string",
                          "format": "date-time"
                        },
                        "status": {
                          "type": "string",
                          "description": "Order Status",
                          "enum": [
                            "placed",
                            "approved",
                            "delivered"
                          ]
                        },
                        "complete": {
                          "description": "Indicates whenever order was completed or not",
                          "type": "boolean",
                          "default": false,
                          "readOnly": true
                        },
                        "requestId": {
                          "description": "Unique Request Id",
                          "type": "string",
                          "writeOnly": true
                        }
                      },
                      "xml": {
                        "name": "Order"
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Order ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "petId": {
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "quantity": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "default": 1
                        },
                        "shipDate": {
                          "description": "Estimated ship date",
                          "type": "string",
                          "format": "date-time"
                        },
                        "status": {
                          "type": "string",
                          "description": "Order Status",
                          "enum": [
                            "placed",
                            "approved",
                            "delivered"
                          ]
                        },
                        "complete": {
                          "description": "Indicates whenever order was completed or not",
                          "type": "boolean",
                          "default": false,
                          "readOnly": true
                        },
                        "requestId": {
                          "description": "Unique Request Id",
                          "type": "string",
                          "writeOnly": true
                        }
                      },
                      "xml": {
                        "name": "Order"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid Order",
                "content": {
                  "application/json": {
                    "example": {
                      "status": 400,
                      "message": "Invalid Order"
                    }
                  }
                }
              }
            },
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "description": "Order ID",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "petId": {
                        "description": "Pet ID",
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "quantity": {
                        "type": "integer",
                        "format": "int32",
                        "minimum": 1,
                        "default": 1
                      },
                      "shipDate": {
                        "description": "Estimated ship date",
                        "type": "string",
                        "format": "date-time"
                      },
                      "status": {
                        "type": "string",
                        "description": "Order Status",
                        "enum": [
                          "placed",
                          "approved",
                          "delivered"
                        ]
                      },
                      "complete": {
                        "description": "Indicates whenever order was completed or not",
                        "type": "boolean",
                        "default": false,
                        "readOnly": true
                      },
                      "requestId": {
                        "description": "Unique Request Id",
                        "type": "string",
                        "writeOnly": true
                      }
                    },
                    "xml": {
                      "name": "Order"
                    }
                  }
                }
              },
              "description": "order placed for purchasing the pet",
              "required": true
            },
            "method": "post",
            "path": "/store/order",
            "parameters": [],
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "id": 0,
              "petId": 0,
              "quantity": 0,
              "shipDate": "string",
              "status": "placed",
              "complete": false,
              "requestId": "string"
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Place an order for a pet",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "store",
                  "order"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"quantity\": 1,\n    \"shipDate\": \"<dateTime>\",\n    \"status\": \"<string>\",\n    \"requestId\": \"<string>\"\n}"
              }
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/place-an-order-for-a-pet",
          "previous": {
            "title": "Returns pet inventories by status",
            "permalink": "/zh-TW/api/returns-pet-inventories-by-status"
          },
          "next": {
            "title": "Find purchase order by ID",
            "permalink": "/zh-TW/api/find-purchase-order-by-id"
          }
        },
        {
          "type": "api",
          "id": "find-purchase-order-by-id",
          "unversionedId": "find-purchase-order-by-id",
          "title": "Find purchase order by ID",
          "description": "",
          "slug": "/find-purchase-order-by-id",
          "frontMatter": {},
          "api": {
            "tags": [
              "Petstore orders"
            ],
            "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
            "operationId": "getOrderById",
            "parameters": [
              {
                "name": "orderId",
                "in": "path",
                "description": "ID of pet that needs to be fetched",
                "required": true,
                "schema": {
                  "type": "integer",
                  "format": "int64",
                  "minimum": 1,
                  "maximum": 5
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Order ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "petId": {
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "quantity": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "default": 1
                        },
                        "shipDate": {
                          "description": "Estimated ship date",
                          "type": "string",
                          "format": "date-time"
                        },
                        "status": {
                          "type": "string",
                          "description": "Order Status",
                          "enum": [
                            "placed",
                            "approved",
                            "delivered"
                          ]
                        },
                        "complete": {
                          "description": "Indicates whenever order was completed or not",
                          "type": "boolean",
                          "default": false,
                          "readOnly": true
                        },
                        "requestId": {
                          "description": "Unique Request Id",
                          "type": "string",
                          "writeOnly": true
                        }
                      },
                      "xml": {
                        "name": "Order"
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "Order ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "petId": {
                          "description": "Pet ID",
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "quantity": {
                          "type": "integer",
                          "format": "int32",
                          "minimum": 1,
                          "default": 1
                        },
                        "shipDate": {
                          "description": "Estimated ship date",
                          "type": "string",
                          "format": "date-time"
                        },
                        "status": {
                          "type": "string",
                          "description": "Order Status",
                          "enum": [
                            "placed",
                            "approved",
                            "delivered"
                          ]
                        },
                        "complete": {
                          "description": "Indicates whenever order was completed or not",
                          "type": "boolean",
                          "default": false,
                          "readOnly": true
                        },
                        "requestId": {
                          "description": "Unique Request Id",
                          "type": "string",
                          "writeOnly": true
                        }
                      },
                      "xml": {
                        "name": "Order"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Order not found"
              }
            },
            "method": "get",
            "path": "/store/order/{orderId}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Find purchase order by ID",
              "description": {
                "content": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "store",
                  "order",
                  ":orderId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ID of pet that needs to be fetched",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<long>",
                    "key": "orderId"
                  }
                ]
              },
              "method": "GET"
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/find-purchase-order-by-id",
          "previous": {
            "title": "Place an order for a pet",
            "permalink": "/zh-TW/api/place-an-order-for-a-pet"
          },
          "next": {
            "title": "Delete purchase order by ID",
            "permalink": "/zh-TW/api/delete-purchase-order-by-id"
          }
        },
        {
          "type": "api",
          "id": "delete-purchase-order-by-id",
          "unversionedId": "delete-purchase-order-by-id",
          "title": "Delete purchase order by ID",
          "description": "",
          "slug": "/delete-purchase-order-by-id",
          "frontMatter": {},
          "api": {
            "tags": [
              "Petstore orders"
            ],
            "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
            "operationId": "deleteOrder",
            "parameters": [
              {
                "name": "orderId",
                "in": "path",
                "description": "ID of the order that needs to be deleted",
                "required": true,
                "schema": {
                  "type": "string",
                  "minimum": 1
                }
              }
            ],
            "responses": {
              "400": {
                "description": "Invalid ID supplied"
              },
              "404": {
                "description": "Order not found"
              }
            },
            "method": "delete",
            "path": "/store/order/{orderId}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Delete purchase order by ID",
              "description": {
                "content": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "store",
                  "order",
                  ":orderId"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) ID of the order that needs to be deleted",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "orderId"
                  }
                ]
              },
              "method": "DELETE"
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/delete-purchase-order-by-id",
          "previous": {
            "title": "Find purchase order by ID",
            "permalink": "/zh-TW/api/find-purchase-order-by-id"
          },
          "next": {
            "title": "Subscribe to the Store events",
            "permalink": "/zh-TW/api/subscribe-to-the-store-events"
          }
        },
        {
          "type": "api",
          "id": "subscribe-to-the-store-events",
          "unversionedId": "subscribe-to-the-store-events",
          "title": "Subscribe to the Store events",
          "description": "",
          "slug": "/subscribe-to-the-store-events",
          "frontMatter": {},
          "api": {
            "tags": [
              "Petstore orders"
            ],
            "description": "Add subscription for a store events",
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "callbackUrl": {
                        "type": "string",
                        "format": "uri",
                        "description": "This URL will be called by the server when the desired event will occur",
                        "example": "https://myserver.com/send/callback/here"
                      },
                      "eventName": {
                        "type": "string",
                        "description": "Event name for the subscription",
                        "enum": [
                          "orderInProgress",
                          "orderShipped",
                          "orderDelivered"
                        ],
                        "example": "orderInProgress"
                      }
                    },
                    "required": [
                      "callbackUrl",
                      "eventName"
                    ]
                  }
                }
              }
            },
            "responses": {
              "201": {
                "description": "Subscription added",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "subscriptionId": {
                          "type": "string",
                          "example": "AAA-123-BBB-456"
                        }
                      }
                    }
                  }
                }
              }
            },
            "callbacks": {
              "orderInProgress": {
                "{$request.body#/callbackUrl}?event={$request.body#/eventName}": {
                  "servers": [
                    {
                      "url": "//callback-url.path-level/v1",
                      "description": "Path level server 1"
                    },
                    {
                      "url": "//callback-url.path-level/v2",
                      "description": "Path level server 2"
                    }
                  ],
                  "post": {
                    "summary": "Order in Progress (Summary)",
                    "description": "A callback triggered every time an Order is updated status to \"inProgress\" (Description)",
                    "externalDocs": {
                      "description": "Find out more",
                      "url": "https://more-details.com/demo"
                    },
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-10-19T16:46:45Z"
                              },
                              "status": {
                                "type": "string",
                                "example": "inProgress"
                              }
                            }
                          }
                        },
                        "application/xml": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              }
                            }
                          },
                          "example": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  <orderId>123</orderId>\n  <status>inProgress</status>\n  <timestamp>2018-10-19T16:46:45Z</timestamp>\n</root>\n"
                        }
                      }
                    },
                    "responses": {
                      "200": {
                        "description": "Callback successfully processed and no retries will be performed",
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "someProp": {
                                  "type": "string",
                                  "example": "123"
                                }
                              }
                            }
                          }
                        }
                      },
                      "299": {
                        "description": "Response for cancelling subscription"
                      },
                      "500": {
                        "description": "Callback processing failed and retries will be performed"
                      }
                    },
                    "x-codeSamples": [
                      {
                        "lang": "C#",
                        "source": "PetStore.v1.Pet pet = new PetStore.v1.Pet();\npet.setApiKey(\"your api key\");\npet.petType = PetStore.v1.Pet.TYPE_DOG;\npet.name = \"Rex\";\n// set other fields\nPetStoreResponse response = pet.create();\nif (response.statusCode == HttpStatusCode.Created)\n{\n  // Successfully created\n}\nelse\n{\n  // Something wrong -- check response for errors\n  Console.WriteLine(response.getRawResponse());\n}\n"
                      },
                      {
                        "lang": "PHP",
                        "source": "$form = new \\PetStore\\Entities\\Pet();\n$form->setPetType(\"Dog\");\n$form->setName(\"Rex\");\n// set other fields\ntry {\n    $pet = $client->pets()->create($form);\n} catch (UnprocessableEntityException $e) {\n    var_dump($e->getErrors());\n}\n"
                      }
                    ]
                  },
                  "put": {
                    "description": "Order in Progress (Only Description)",
                    "servers": [
                      {
                        "url": "//callback-url.operation-level/v1",
                        "description": "Operation level server 1 (Operation override)"
                      },
                      {
                        "url": "//callback-url.operation-level/v2",
                        "description": "Operation level server 2 (Operation override)"
                      }
                    ],
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-10-19T16:46:45Z"
                              },
                              "status": {
                                "type": "string",
                                "example": "inProgress"
                              }
                            }
                          }
                        },
                        "application/xml": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              }
                            }
                          },
                          "example": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<root>\n  <orderId>123</orderId>\n  <status>inProgress</status>\n  <timestamp>2018-10-19T16:46:45Z</timestamp>\n</root>\n"
                        }
                      }
                    },
                    "responses": {
                      "200": {
                        "description": "Callback successfully processed and no retries will be performed",
                        "content": {
                          "application/json": {
                            "schema": {
                              "type": "object",
                              "properties": {
                                "someProp": {
                                  "type": "string",
                                  "example": "123"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              "orderShipped": {
                "{$request.body#/callbackUrl}?event={$request.body#/eventName}": {
                  "post": {
                    "description": "Very long description\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor\nincididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis\nnostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu\nfugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\nculpa qui officia deserunt mollit anim id est laborum.\n",
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-10-19T16:46:45Z"
                              },
                              "estimatedDeliveryDate": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-11-11T16:00:00Z"
                              }
                            }
                          }
                        }
                      }
                    },
                    "responses": {
                      "200": {
                        "description": "Callback successfully processed and no retries will be performed"
                      }
                    }
                  }
                }
              },
              "orderDelivered": {
                "http://notificationServer.com?url={$request.body#/callbackUrl}&event={$request.body#/eventName}": {
                  "post": {
                    "deprecated": true,
                    "summary": "Order delivered",
                    "description": "A callback triggered every time an Order is delivered to the recipient",
                    "requestBody": {
                      "content": {
                        "application/json": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "orderId": {
                                "type": "string",
                                "example": "123"
                              },
                              "timestamp": {
                                "type": "string",
                                "format": "date-time",
                                "example": "2018-10-19T16:46:45Z"
                              }
                            }
                          }
                        }
                      }
                    },
                    "responses": {
                      "200": {
                        "description": "Callback successfully processed and no retries will be performed"
                      }
                    }
                  }
                }
              }
            },
            "method": "post",
            "path": "/store/subscribe",
            "parameters": [],
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "callbackUrl": "https://myserver.com/send/callback/here",
              "eventName": "orderInProgress"
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Subscribe to the Store events",
              "description": {
                "content": "Add subscription for a store events",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "store",
                  "subscribe"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"callbackUrl\": \"<uri>\",\n    \"eventName\": \"<string>\"\n}"
              }
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/subscribe-to-the-store-events",
          "previous": {
            "title": "Delete purchase order by ID",
            "permalink": "/zh-TW/api/delete-purchase-order-by-id"
          },
          "next": {
            "title": "Create user",
            "permalink": "/zh-TW/api/create-user"
          }
        },
        {
          "type": "api",
          "id": "create-user",
          "unversionedId": "create-user",
          "title": "Create user",
          "description": "",
          "slug": "/create-user",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "This can only be done by the logged in user.",
            "operationId": "createUser",
            "responses": {
              "default": {
                "description": "successful operation"
              }
            },
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "pet": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "name",
                              "photoUrls"
                            ],
                            "discriminator": {
                              "propertyName": "petType",
                              "mapping": {
                                "cat": "#/components/schemas/Cat",
                                "dog": "#/components/schemas/Dog",
                                "bee": "#/components/schemas/HoneyBee"
                              }
                            },
                            "properties": {
                              "id": {
                                "externalDocs": {
                                  "description": "Find more info here",
                                  "url": "https://example.com"
                                },
                                "description": "Pet ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "category": {
                                "description": "Categories this pet belongs to",
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Category ID",
                                    "type": "integer",
                                    "format": "int64",
                                    "readOnly": true
                                  },
                                  "name": {
                                    "description": "Category name",
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "sub": {
                                    "description": "Test Sub Category",
                                    "type": "object",
                                    "properties": {
                                      "prop1": {
                                        "type": "string",
                                        "description": "Dumb Property"
                                      }
                                    }
                                  }
                                },
                                "xml": {
                                  "name": "Category"
                                }
                              },
                              "name": {
                                "description": "The name given to a pet",
                                "type": "string",
                                "example": "Guru"
                              },
                              "photoUrls": {
                                "description": "The list of URL to a cute photos featuring pet",
                                "type": "array",
                                "maxItems": 20,
                                "xml": {
                                  "name": "photoUrl",
                                  "wrapped": true
                                },
                                "items": {
                                  "type": "string",
                                  "format": "url"
                                }
                              },
                              "friend": {
                                "$ref": "#/components/schemas/Pet"
                              },
                              "tags": {
                                "description": "Tags attached to the pet",
                                "type": "array",
                                "minItems": 1,
                                "xml": {
                                  "name": "tag",
                                  "wrapped": true
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Tag ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Tag name",
                                      "type": "string",
                                      "minLength": 1
                                    }
                                  },
                                  "xml": {
                                    "name": "Tag"
                                  }
                                }
                              },
                              "status": {
                                "type": "string",
                                "description": "Pet status in the store",
                                "enum": [
                                  "available",
                                  "pending",
                                  "sold"
                                ]
                              },
                              "petType": {
                                "description": "Type of a pet",
                                "type": "string"
                              }
                            },
                            "xml": {
                              "name": "Pet"
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Tag ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Tag name",
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "xml": {
                              "name": "Tag"
                            }
                          }
                        ]
                      },
                      "username": {
                        "description": "User supplied username",
                        "type": "string",
                        "minLength": 4,
                        "example": "John78"
                      },
                      "firstName": {
                        "description": "User first name",
                        "type": "string",
                        "minLength": 1,
                        "example": "John"
                      },
                      "lastName": {
                        "description": "User last name",
                        "type": "string",
                        "minLength": 1,
                        "example": "Smith"
                      },
                      "email": {
                        "description": "User email address",
                        "type": "string",
                        "format": "email",
                        "example": "john.smith@example.com"
                      },
                      "password": {
                        "type": "string",
                        "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                        "format": "password",
                        "minLength": 8,
                        "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                        "example": "drowssaP123"
                      },
                      "phone": {
                        "description": "User phone number in international format",
                        "type": "string",
                        "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                        "example": "+1-202-555-0192"
                      },
                      "userStatus": {
                        "description": "User status",
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "xml": {
                      "name": "User"
                    }
                  }
                }
              },
              "description": "Created user object",
              "required": true
            },
            "method": "post",
            "path": "/user",
            "parameters": [],
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "id": 0,
              "username": "John78",
              "firstName": "John",
              "lastName": "Smith",
              "email": "john.smith@example.com",
              "password": "drowssaP123",
              "phone": "+1-202-555-0192",
              "userStatus": 0
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Create user",
              "description": {
                "content": "This can only be done by the logged in user.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"pet\": {\n        \"name\": \"<string>\",\n        \"photoUrls\": [\n            \"<url>\",\n            \"<url>\"\n        ],\n        \"category\": {\n            \"name\": \"<string>\",\n            \"sub\": {\n                \"prop1\": \"<string>\"\n            }\n        },\n        \"friend\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"tags\": [\n            {\n                \"name\": \"<string>\"\n            }\n        ],\n        \"status\": \"<string>\",\n        \"petType\": \"<string>\"\n    },\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<email>\",\n    \"password\": \"<password>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n}"
              }
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/create-user",
          "previous": {
            "title": "Subscribe to the Store events",
            "permalink": "/zh-TW/api/subscribe-to-the-store-events"
          },
          "next": {
            "title": "Get user by user name",
            "permalink": "/zh-TW/api/get-user-by-user-name"
          }
        },
        {
          "type": "api",
          "id": "get-user-by-user-name",
          "unversionedId": "get-user-by-user-name",
          "title": "Get user by user name",
          "description": "",
          "slug": "/get-user-by-user-name",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "",
            "operationId": "getUserByName",
            "parameters": [
              {
                "name": "username",
                "in": "path",
                "description": "The name that needs to be fetched. Use user1 for testing. ",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "pet": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "name",
                                "photoUrls"
                              ],
                              "discriminator": {
                                "propertyName": "petType",
                                "mapping": {
                                  "cat": "#/components/schemas/Cat",
                                  "dog": "#/components/schemas/Dog",
                                  "bee": "#/components/schemas/HoneyBee"
                                }
                              },
                              "properties": {
                                "id": {
                                  "externalDocs": {
                                    "description": "Find more info here",
                                    "url": "https://example.com"
                                  },
                                  "description": "Pet ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "category": {
                                  "description": "Categories this pet belongs to",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Category ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Category name",
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "sub": {
                                      "description": "Test Sub Category",
                                      "type": "object",
                                      "properties": {
                                        "prop1": {
                                          "type": "string",
                                          "description": "Dumb Property"
                                        }
                                      }
                                    }
                                  },
                                  "xml": {
                                    "name": "Category"
                                  }
                                },
                                "name": {
                                  "description": "The name given to a pet",
                                  "type": "string",
                                  "example": "Guru"
                                },
                                "photoUrls": {
                                  "description": "The list of URL to a cute photos featuring pet",
                                  "type": "array",
                                  "maxItems": 20,
                                  "xml": {
                                    "name": "photoUrl",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "string",
                                    "format": "url"
                                  }
                                },
                                "friend": {
                                  "$ref": "#/components/schemas/Pet"
                                },
                                "tags": {
                                  "description": "Tags attached to the pet",
                                  "type": "array",
                                  "minItems": 1,
                                  "xml": {
                                    "name": "tag",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Tag ID",
                                        "type": "integer",
                                        "format": "int64",
                                        "readOnly": true
                                      },
                                      "name": {
                                        "description": "Tag name",
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    },
                                    "xml": {
                                      "name": "Tag"
                                    }
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "description": "Pet status in the store",
                                  "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                  ]
                                },
                                "petType": {
                                  "description": "Type of a pet",
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Pet"
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          ]
                        },
                        "username": {
                          "description": "User supplied username",
                          "type": "string",
                          "minLength": 4,
                          "example": "John78"
                        },
                        "firstName": {
                          "description": "User first name",
                          "type": "string",
                          "minLength": 1,
                          "example": "John"
                        },
                        "lastName": {
                          "description": "User last name",
                          "type": "string",
                          "minLength": 1,
                          "example": "Smith"
                        },
                        "email": {
                          "description": "User email address",
                          "type": "string",
                          "format": "email",
                          "example": "john.smith@example.com"
                        },
                        "password": {
                          "type": "string",
                          "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                          "format": "password",
                          "minLength": 8,
                          "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                          "example": "drowssaP123"
                        },
                        "phone": {
                          "description": "User phone number in international format",
                          "type": "string",
                          "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                          "example": "+1-202-555-0192"
                        },
                        "userStatus": {
                          "description": "User status",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "xml": {
                        "name": "User"
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "pet": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "name",
                                "photoUrls"
                              ],
                              "discriminator": {
                                "propertyName": "petType",
                                "mapping": {
                                  "cat": "#/components/schemas/Cat",
                                  "dog": "#/components/schemas/Dog",
                                  "bee": "#/components/schemas/HoneyBee"
                                }
                              },
                              "properties": {
                                "id": {
                                  "externalDocs": {
                                    "description": "Find more info here",
                                    "url": "https://example.com"
                                  },
                                  "description": "Pet ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "category": {
                                  "description": "Categories this pet belongs to",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Category ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Category name",
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "sub": {
                                      "description": "Test Sub Category",
                                      "type": "object",
                                      "properties": {
                                        "prop1": {
                                          "type": "string",
                                          "description": "Dumb Property"
                                        }
                                      }
                                    }
                                  },
                                  "xml": {
                                    "name": "Category"
                                  }
                                },
                                "name": {
                                  "description": "The name given to a pet",
                                  "type": "string",
                                  "example": "Guru"
                                },
                                "photoUrls": {
                                  "description": "The list of URL to a cute photos featuring pet",
                                  "type": "array",
                                  "maxItems": 20,
                                  "xml": {
                                    "name": "photoUrl",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "string",
                                    "format": "url"
                                  }
                                },
                                "friend": {
                                  "$ref": "#/components/schemas/Pet"
                                },
                                "tags": {
                                  "description": "Tags attached to the pet",
                                  "type": "array",
                                  "minItems": 1,
                                  "xml": {
                                    "name": "tag",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Tag ID",
                                        "type": "integer",
                                        "format": "int64",
                                        "readOnly": true
                                      },
                                      "name": {
                                        "description": "Tag name",
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    },
                                    "xml": {
                                      "name": "Tag"
                                    }
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "description": "Pet status in the store",
                                  "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                  ]
                                },
                                "petType": {
                                  "description": "Type of a pet",
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Pet"
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          ]
                        },
                        "username": {
                          "description": "User supplied username",
                          "type": "string",
                          "minLength": 4,
                          "example": "John78"
                        },
                        "firstName": {
                          "description": "User first name",
                          "type": "string",
                          "minLength": 1,
                          "example": "John"
                        },
                        "lastName": {
                          "description": "User last name",
                          "type": "string",
                          "minLength": 1,
                          "example": "Smith"
                        },
                        "email": {
                          "description": "User email address",
                          "type": "string",
                          "format": "email",
                          "example": "john.smith@example.com"
                        },
                        "password": {
                          "type": "string",
                          "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                          "format": "password",
                          "minLength": 8,
                          "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                          "example": "drowssaP123"
                        },
                        "phone": {
                          "description": "User phone number in international format",
                          "type": "string",
                          "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                          "example": "+1-202-555-0192"
                        },
                        "userStatus": {
                          "description": "User status",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "xml": {
                        "name": "User"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid username supplied"
              },
              "404": {
                "description": "User not found"
              }
            },
            "method": "get",
            "path": "/user/{username}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Get user by user name",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  ":username"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) The name that needs to be fetched. Use user1 for testing. ",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "username"
                  }
                ]
              },
              "method": "GET"
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/get-user-by-user-name",
          "previous": {
            "title": "Create user",
            "permalink": "/zh-TW/api/create-user"
          },
          "next": {
            "title": "Updated user",
            "permalink": "/zh-TW/api/updated-user"
          }
        },
        {
          "type": "api",
          "id": "updated-user",
          "unversionedId": "updated-user",
          "title": "Updated user",
          "description": "",
          "slug": "/updated-user",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "This can only be done by the logged in user.",
            "operationId": "updateUser",
            "parameters": [
              {
                "name": "username",
                "in": "path",
                "description": "name that need to be deleted",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "400": {
                "description": "Invalid user supplied"
              },
              "404": {
                "description": "User not found"
              }
            },
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "integer",
                        "format": "int64",
                        "readOnly": true
                      },
                      "pet": {
                        "oneOf": [
                          {
                            "type": "object",
                            "required": [
                              "name",
                              "photoUrls"
                            ],
                            "discriminator": {
                              "propertyName": "petType",
                              "mapping": {
                                "cat": "#/components/schemas/Cat",
                                "dog": "#/components/schemas/Dog",
                                "bee": "#/components/schemas/HoneyBee"
                              }
                            },
                            "properties": {
                              "id": {
                                "externalDocs": {
                                  "description": "Find more info here",
                                  "url": "https://example.com"
                                },
                                "description": "Pet ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "category": {
                                "description": "Categories this pet belongs to",
                                "type": "object",
                                "properties": {
                                  "id": {
                                    "description": "Category ID",
                                    "type": "integer",
                                    "format": "int64",
                                    "readOnly": true
                                  },
                                  "name": {
                                    "description": "Category name",
                                    "type": "string",
                                    "minLength": 1
                                  },
                                  "sub": {
                                    "description": "Test Sub Category",
                                    "type": "object",
                                    "properties": {
                                      "prop1": {
                                        "type": "string",
                                        "description": "Dumb Property"
                                      }
                                    }
                                  }
                                },
                                "xml": {
                                  "name": "Category"
                                }
                              },
                              "name": {
                                "description": "The name given to a pet",
                                "type": "string",
                                "example": "Guru"
                              },
                              "photoUrls": {
                                "description": "The list of URL to a cute photos featuring pet",
                                "type": "array",
                                "maxItems": 20,
                                "xml": {
                                  "name": "photoUrl",
                                  "wrapped": true
                                },
                                "items": {
                                  "type": "string",
                                  "format": "url"
                                }
                              },
                              "friend": {
                                "$ref": "#/components/schemas/Pet"
                              },
                              "tags": {
                                "description": "Tags attached to the pet",
                                "type": "array",
                                "minItems": 1,
                                "xml": {
                                  "name": "tag",
                                  "wrapped": true
                                },
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Tag ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Tag name",
                                      "type": "string",
                                      "minLength": 1
                                    }
                                  },
                                  "xml": {
                                    "name": "Tag"
                                  }
                                }
                              },
                              "status": {
                                "type": "string",
                                "description": "Pet status in the store",
                                "enum": [
                                  "available",
                                  "pending",
                                  "sold"
                                ]
                              },
                              "petType": {
                                "description": "Type of a pet",
                                "type": "string"
                              }
                            },
                            "xml": {
                              "name": "Pet"
                            }
                          },
                          {
                            "type": "object",
                            "properties": {
                              "id": {
                                "description": "Tag ID",
                                "type": "integer",
                                "format": "int64",
                                "readOnly": true
                              },
                              "name": {
                                "description": "Tag name",
                                "type": "string",
                                "minLength": 1
                              }
                            },
                            "xml": {
                              "name": "Tag"
                            }
                          }
                        ]
                      },
                      "username": {
                        "description": "User supplied username",
                        "type": "string",
                        "minLength": 4,
                        "example": "John78"
                      },
                      "firstName": {
                        "description": "User first name",
                        "type": "string",
                        "minLength": 1,
                        "example": "John"
                      },
                      "lastName": {
                        "description": "User last name",
                        "type": "string",
                        "minLength": 1,
                        "example": "Smith"
                      },
                      "email": {
                        "description": "User email address",
                        "type": "string",
                        "format": "email",
                        "example": "john.smith@example.com"
                      },
                      "password": {
                        "type": "string",
                        "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                        "format": "password",
                        "minLength": 8,
                        "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                        "example": "drowssaP123"
                      },
                      "phone": {
                        "description": "User phone number in international format",
                        "type": "string",
                        "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                        "example": "+1-202-555-0192"
                      },
                      "userStatus": {
                        "description": "User status",
                        "type": "integer",
                        "format": "int32"
                      }
                    },
                    "xml": {
                      "name": "User"
                    }
                  }
                }
              },
              "description": "Updated user object",
              "required": true
            },
            "method": "put",
            "path": "/user/{username}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": {
              "id": 0,
              "username": "John78",
              "firstName": "John",
              "lastName": "Smith",
              "email": "john.smith@example.com",
              "password": "drowssaP123",
              "phone": "+1-202-555-0192",
              "userStatus": 0
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Updated user",
              "description": {
                "content": "This can only be done by the logged in user.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  ":username"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) name that need to be deleted",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "username"
                  }
                ]
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n    \"pet\": {\n        \"name\": \"<string>\",\n        \"photoUrls\": [\n            \"<url>\",\n            \"<url>\"\n        ],\n        \"category\": {\n            \"name\": \"<string>\",\n            \"sub\": {\n                \"prop1\": \"<string>\"\n            }\n        },\n        \"friend\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"tags\": [\n            {\n                \"name\": \"<string>\"\n            }\n        ],\n        \"status\": \"<string>\",\n        \"petType\": \"<string>\"\n    },\n    \"username\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"email\": \"<email>\",\n    \"password\": \"<password>\",\n    \"phone\": \"<string>\",\n    \"userStatus\": \"<integer>\"\n}"
              }
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/updated-user",
          "previous": {
            "title": "Get user by user name",
            "permalink": "/zh-TW/api/get-user-by-user-name"
          },
          "next": {
            "title": "Delete user",
            "permalink": "/zh-TW/api/delete-user"
          }
        },
        {
          "type": "api",
          "id": "delete-user",
          "unversionedId": "delete-user",
          "title": "Delete user",
          "description": "",
          "slug": "/delete-user",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "This can only be done by the logged in user.",
            "operationId": "deleteUser",
            "parameters": [
              {
                "name": "username",
                "in": "path",
                "description": "The name that needs to be deleted",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "400": {
                "description": "Invalid username supplied"
              },
              "404": {
                "description": "User not found"
              }
            },
            "method": "delete",
            "path": "/user/{username}",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Delete user",
              "description": {
                "content": "This can only be done by the logged in user.",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  ":username"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": [
                  {
                    "description": {
                      "content": "(Required) The name that needs to be deleted",
                      "type": "text/plain"
                    },
                    "type": "any",
                    "value": "<string>",
                    "key": "username"
                  }
                ]
              },
              "method": "DELETE"
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/delete-user",
          "previous": {
            "title": "Updated user",
            "permalink": "/zh-TW/api/updated-user"
          },
          "next": {
            "title": "Creates list of users with given input array",
            "permalink": "/zh-TW/api/creates-list-of-users-with-given-input-array"
          }
        },
        {
          "type": "api",
          "id": "creates-list-of-users-with-given-input-array",
          "unversionedId": "creates-list-of-users-with-given-input-array",
          "title": "Creates list of users with given input array",
          "description": "",
          "slug": "/creates-list-of-users-with-given-input-array",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "",
            "operationId": "createUsersWithArrayInput",
            "responses": {
              "default": {
                "description": "successful operation"
              }
            },
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "pet": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "name",
                                "photoUrls"
                              ],
                              "discriminator": {
                                "propertyName": "petType",
                                "mapping": {
                                  "cat": "#/components/schemas/Cat",
                                  "dog": "#/components/schemas/Dog",
                                  "bee": "#/components/schemas/HoneyBee"
                                }
                              },
                              "properties": {
                                "id": {
                                  "externalDocs": {
                                    "description": "Find more info here",
                                    "url": "https://example.com"
                                  },
                                  "description": "Pet ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "category": {
                                  "description": "Categories this pet belongs to",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Category ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Category name",
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "sub": {
                                      "description": "Test Sub Category",
                                      "type": "object",
                                      "properties": {
                                        "prop1": {
                                          "type": "string",
                                          "description": "Dumb Property"
                                        }
                                      }
                                    }
                                  },
                                  "xml": {
                                    "name": "Category"
                                  }
                                },
                                "name": {
                                  "description": "The name given to a pet",
                                  "type": "string",
                                  "example": "Guru"
                                },
                                "photoUrls": {
                                  "description": "The list of URL to a cute photos featuring pet",
                                  "type": "array",
                                  "maxItems": 20,
                                  "xml": {
                                    "name": "photoUrl",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "string",
                                    "format": "url"
                                  }
                                },
                                "friend": {
                                  "$ref": "#/components/schemas/Pet"
                                },
                                "tags": {
                                  "description": "Tags attached to the pet",
                                  "type": "array",
                                  "minItems": 1,
                                  "xml": {
                                    "name": "tag",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Tag ID",
                                        "type": "integer",
                                        "format": "int64",
                                        "readOnly": true
                                      },
                                      "name": {
                                        "description": "Tag name",
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    },
                                    "xml": {
                                      "name": "Tag"
                                    }
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "description": "Pet status in the store",
                                  "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                  ]
                                },
                                "petType": {
                                  "description": "Type of a pet",
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Pet"
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          ]
                        },
                        "username": {
                          "description": "User supplied username",
                          "type": "string",
                          "minLength": 4,
                          "example": "John78"
                        },
                        "firstName": {
                          "description": "User first name",
                          "type": "string",
                          "minLength": 1,
                          "example": "John"
                        },
                        "lastName": {
                          "description": "User last name",
                          "type": "string",
                          "minLength": 1,
                          "example": "Smith"
                        },
                        "email": {
                          "description": "User email address",
                          "type": "string",
                          "format": "email",
                          "example": "john.smith@example.com"
                        },
                        "password": {
                          "type": "string",
                          "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                          "format": "password",
                          "minLength": 8,
                          "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                          "example": "drowssaP123"
                        },
                        "phone": {
                          "description": "User phone number in international format",
                          "type": "string",
                          "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                          "example": "+1-202-555-0192"
                        },
                        "userStatus": {
                          "description": "User status",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "xml": {
                        "name": "User"
                      }
                    }
                  }
                }
              },
              "description": "List of user object",
              "required": true
            },
            "method": "post",
            "path": "/user/createWithArray",
            "parameters": [],
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": [
              {
                "id": 0,
                "username": "John78",
                "firstName": "John",
                "lastName": "Smith",
                "email": "john.smith@example.com",
                "password": "drowssaP123",
                "phone": "+1-202-555-0192",
                "userStatus": 0
              }
            ],
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Creates list of users with given input array",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  "createWithArray"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "[\n    {\n        \"pet\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"name\": \"<string>\",\n                \"photoUrls\": [\n                    \"<url>\",\n                    \"<url>\"\n                ],\n                \"category\": {\n                    \"name\": \"<string>\",\n                    \"sub\": {\n                        \"prop1\": \"<string>\"\n                    }\n                },\n                \"friend\": {\n                    \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n                },\n                \"tags\": [\n                    {\n                        \"name\": \"<string>\"\n                    }\n                ],\n                \"status\": \"<string>\",\n                \"petType\": \"<string>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"username\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"email\": \"<email>\",\n        \"password\": \"<password>\",\n        \"phone\": \"<string>\",\n        \"userStatus\": \"<integer>\"\n    },\n    {\n        \"pet\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"name\": \"<string>\",\n                \"photoUrls\": [\n                    \"<url>\",\n                    \"<url>\"\n                ],\n                \"category\": {\n                    \"name\": \"<string>\",\n                    \"sub\": {\n                        \"prop1\": \"<string>\"\n                    }\n                },\n                \"friend\": {\n                    \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n                },\n                \"tags\": [\n                    {\n                        \"name\": \"<string>\"\n                    }\n                ],\n                \"status\": \"<string>\",\n                \"petType\": \"<string>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"username\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"email\": \"<email>\",\n        \"password\": \"<password>\",\n        \"phone\": \"<string>\",\n        \"userStatus\": \"<integer>\"\n    }\n]"
              }
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/creates-list-of-users-with-given-input-array",
          "previous": {
            "title": "Delete user",
            "permalink": "/zh-TW/api/delete-user"
          },
          "next": {
            "title": "Creates list of users with given input array",
            "permalink": "/zh-TW/api/creates-list-of-users-with-given-input-array-1"
          }
        },
        {
          "type": "api",
          "id": "creates-list-of-users-with-given-input-array-1",
          "unversionedId": "creates-list-of-users-with-given-input-array-1",
          "title": "Creates list of users with given input array",
          "description": "",
          "slug": "/creates-list-of-users-with-given-input-array-1",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "",
            "operationId": "createUsersWithListInput",
            "responses": {
              "default": {
                "description": "successful operation"
              }
            },
            "requestBody": {
              "content": {
                "application/json": {
                  "schema": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "integer",
                          "format": "int64",
                          "readOnly": true
                        },
                        "pet": {
                          "oneOf": [
                            {
                              "type": "object",
                              "required": [
                                "name",
                                "photoUrls"
                              ],
                              "discriminator": {
                                "propertyName": "petType",
                                "mapping": {
                                  "cat": "#/components/schemas/Cat",
                                  "dog": "#/components/schemas/Dog",
                                  "bee": "#/components/schemas/HoneyBee"
                                }
                              },
                              "properties": {
                                "id": {
                                  "externalDocs": {
                                    "description": "Find more info here",
                                    "url": "https://example.com"
                                  },
                                  "description": "Pet ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "category": {
                                  "description": "Categories this pet belongs to",
                                  "type": "object",
                                  "properties": {
                                    "id": {
                                      "description": "Category ID",
                                      "type": "integer",
                                      "format": "int64",
                                      "readOnly": true
                                    },
                                    "name": {
                                      "description": "Category name",
                                      "type": "string",
                                      "minLength": 1
                                    },
                                    "sub": {
                                      "description": "Test Sub Category",
                                      "type": "object",
                                      "properties": {
                                        "prop1": {
                                          "type": "string",
                                          "description": "Dumb Property"
                                        }
                                      }
                                    }
                                  },
                                  "xml": {
                                    "name": "Category"
                                  }
                                },
                                "name": {
                                  "description": "The name given to a pet",
                                  "type": "string",
                                  "example": "Guru"
                                },
                                "photoUrls": {
                                  "description": "The list of URL to a cute photos featuring pet",
                                  "type": "array",
                                  "maxItems": 20,
                                  "xml": {
                                    "name": "photoUrl",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "string",
                                    "format": "url"
                                  }
                                },
                                "friend": {
                                  "$ref": "#/components/schemas/Pet"
                                },
                                "tags": {
                                  "description": "Tags attached to the pet",
                                  "type": "array",
                                  "minItems": 1,
                                  "xml": {
                                    "name": "tag",
                                    "wrapped": true
                                  },
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "description": "Tag ID",
                                        "type": "integer",
                                        "format": "int64",
                                        "readOnly": true
                                      },
                                      "name": {
                                        "description": "Tag name",
                                        "type": "string",
                                        "minLength": 1
                                      }
                                    },
                                    "xml": {
                                      "name": "Tag"
                                    }
                                  }
                                },
                                "status": {
                                  "type": "string",
                                  "description": "Pet status in the store",
                                  "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                  ]
                                },
                                "petType": {
                                  "description": "Type of a pet",
                                  "type": "string"
                                }
                              },
                              "xml": {
                                "name": "Pet"
                              }
                            },
                            {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "description": "Tag ID",
                                  "type": "integer",
                                  "format": "int64",
                                  "readOnly": true
                                },
                                "name": {
                                  "description": "Tag name",
                                  "type": "string",
                                  "minLength": 1
                                }
                              },
                              "xml": {
                                "name": "Tag"
                              }
                            }
                          ]
                        },
                        "username": {
                          "description": "User supplied username",
                          "type": "string",
                          "minLength": 4,
                          "example": "John78"
                        },
                        "firstName": {
                          "description": "User first name",
                          "type": "string",
                          "minLength": 1,
                          "example": "John"
                        },
                        "lastName": {
                          "description": "User last name",
                          "type": "string",
                          "minLength": 1,
                          "example": "Smith"
                        },
                        "email": {
                          "description": "User email address",
                          "type": "string",
                          "format": "email",
                          "example": "john.smith@example.com"
                        },
                        "password": {
                          "type": "string",
                          "description": "User password, MUST contain a mix of upper and lower case letters, as well as digits",
                          "format": "password",
                          "minLength": 8,
                          "pattern": "/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/",
                          "example": "drowssaP123"
                        },
                        "phone": {
                          "description": "User phone number in international format",
                          "type": "string",
                          "pattern": "/^\\+(?:[0-9]-?){6,14}[0-9]$/",
                          "example": "+1-202-555-0192"
                        },
                        "userStatus": {
                          "description": "User status",
                          "type": "integer",
                          "format": "int32"
                        }
                      },
                      "xml": {
                        "name": "User"
                      }
                    }
                  }
                }
              },
              "description": "List of user object",
              "required": true
            },
            "method": "post",
            "path": "/user/createWithList",
            "parameters": [],
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "jsonRequestBodyExample": [
              {
                "id": 0,
                "username": "John78",
                "firstName": "John",
                "lastName": "Smith",
                "email": "john.smith@example.com",
                "password": "drowssaP123",
                "phone": "+1-202-555-0192",
                "userStatus": 0
              }
            ],
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Creates list of users with given input array",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  "createWithList"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "[\n    {\n        \"pet\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"name\": \"<string>\",\n                \"photoUrls\": [\n                    \"<url>\",\n                    \"<url>\"\n                ],\n                \"category\": {\n                    \"name\": \"<string>\",\n                    \"sub\": {\n                        \"prop1\": \"<string>\"\n                    }\n                },\n                \"friend\": {\n                    \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n                },\n                \"tags\": [\n                    {\n                        \"name\": \"<string>\"\n                    }\n                ],\n                \"status\": \"<string>\",\n                \"petType\": \"<string>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"username\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"email\": \"<email>\",\n        \"password\": \"<password>\",\n        \"phone\": \"<string>\",\n        \"userStatus\": \"<integer>\"\n    },\n    {\n        \"pet\": {\n            \"name\": \"<string>\",\n            \"photoUrls\": [\n                \"<url>\",\n                \"<url>\"\n            ],\n            \"category\": {\n                \"name\": \"<string>\",\n                \"sub\": {\n                    \"prop1\": \"<string>\"\n                }\n            },\n            \"friend\": {\n                \"name\": \"<string>\",\n                \"photoUrls\": [\n                    \"<url>\",\n                    \"<url>\"\n                ],\n                \"category\": {\n                    \"name\": \"<string>\",\n                    \"sub\": {\n                        \"prop1\": \"<string>\"\n                    }\n                },\n                \"friend\": {\n                    \"value\": \"<Circular reference to #/components/schemas/Pet detected>\"\n                },\n                \"tags\": [\n                    {\n                        \"name\": \"<string>\"\n                    }\n                ],\n                \"status\": \"<string>\",\n                \"petType\": \"<string>\"\n            },\n            \"tags\": [\n                {\n                    \"name\": \"<string>\"\n                }\n            ],\n            \"status\": \"<string>\",\n            \"petType\": \"<string>\"\n        },\n        \"username\": \"<string>\",\n        \"firstName\": \"<string>\",\n        \"lastName\": \"<string>\",\n        \"email\": \"<email>\",\n        \"password\": \"<password>\",\n        \"phone\": \"<string>\",\n        \"userStatus\": \"<integer>\"\n    }\n]"
              }
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/creates-list-of-users-with-given-input-array-1",
          "previous": {
            "title": "Creates list of users with given input array",
            "permalink": "/zh-TW/api/creates-list-of-users-with-given-input-array"
          },
          "next": {
            "title": "Logs user into the system",
            "permalink": "/zh-TW/api/logs-user-into-the-system"
          }
        },
        {
          "type": "api",
          "id": "logs-user-into-the-system",
          "unversionedId": "logs-user-into-the-system",
          "title": "Logs user into the system",
          "description": "",
          "slug": "/logs-user-into-the-system",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "",
            "operationId": "loginUser",
            "parameters": [
              {
                "name": "username",
                "in": "query",
                "description": "The user name for login",
                "required": true,
                "schema": {
                  "type": "string"
                }
              },
              {
                "name": "password",
                "in": "query",
                "description": "The password for login in clear text",
                "required": true,
                "schema": {
                  "type": "string"
                }
              }
            ],
            "responses": {
              "200": {
                "description": "successful operation",
                "headers": {
                  "X-Rate-Limit": {
                    "description": "calls per hour allowed by the user",
                    "schema": {
                      "type": "integer",
                      "format": "int32"
                    }
                  },
                  "X-Expires-After": {
                    "description": "date in UTC when token expires",
                    "schema": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                },
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "string"
                    },
                    "examples": {
                      "response": {
                        "value": "OK"
                      }
                    }
                  },
                  "application/xml": {
                    "schema": {
                      "type": "string"
                    },
                    "examples": {
                      "response": {
                        "value": "<Message> OK </Message>"
                      }
                    }
                  },
                  "text/plain": {
                    "examples": {
                      "response": {
                        "value": "OK"
                      }
                    }
                  }
                }
              },
              "400": {
                "description": "Invalid username/password supplied"
              }
            },
            "method": "get",
            "path": "/user/login",
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Logs user into the system",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  "login"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "description": {
                      "content": "(Required) The user name for login",
                      "type": "text/plain"
                    },
                    "key": "username",
                    "value": "<string>"
                  },
                  {
                    "description": {
                      "content": "(Required) The password for login in clear text",
                      "type": "text/plain"
                    },
                    "key": "password",
                    "value": "<string>"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/logs-user-into-the-system",
          "previous": {
            "title": "Creates list of users with given input array",
            "permalink": "/zh-TW/api/creates-list-of-users-with-given-input-array-1"
          },
          "next": {
            "title": "Logs out current logged in user session",
            "permalink": "/zh-TW/api/logs-out-current-logged-in-user-session"
          }
        },
        {
          "type": "api",
          "id": "logs-out-current-logged-in-user-session",
          "unversionedId": "logs-out-current-logged-in-user-session",
          "title": "Logs out current logged in user session",
          "description": "",
          "slug": "/logs-out-current-logged-in-user-session",
          "frontMatter": {},
          "api": {
            "tags": [
              "user"
            ],
            "description": "",
            "operationId": "logoutUser",
            "responses": {
              "default": {
                "description": "successful operation"
              }
            },
            "method": "get",
            "path": "/user/logout",
            "parameters": [],
            "servers": [
              {
                "url": "//petstore.swagger.io/v2",
                "description": "Default server"
              },
              {
                "url": "//petstore.swagger.io/sandbox",
                "description": "Sandbox server"
              }
            ],
            "securitySchemes": {
              "petstore_auth": {
                "description": "Get access to data while protecting your account credentials.\nOAuth2 is also a safer and more secure way to give you access.\n",
                "type": "oauth2",
                "flows": {
                  "implicit": {
                    "authorizationUrl": "http://petstore.swagger.io/api/oauth/dialog",
                    "scopes": {
                      "write:pets": "modify pets in your account",
                      "read:pets": "read your pets"
                    }
                  }
                }
              },
              "api_key": {
                "description": "For this sample, you can use the api key `special-key` to test the authorization filters.\n",
                "type": "apiKey",
                "name": "api_key",
                "in": "header"
              }
            },
            "info": {
              "description": "This is a sample server Petstore server.\nYou can find out more about Swagger at\n[http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\nFor this sample, you can use the api key `special-key` to test the authorization filters.\n\n# Introduction\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# OpenAPI Specification\nThis API is documented in **OpenAPI format** and is based on\n[Petstore sample](http://petstore.swagger.io/) provided by [swagger.io](http://swagger.io) team.\nIt was **extended** to illustrate features of [generator-openapi-repo](https://github.com/Rebilly/generator-openapi-repo)\ntool and [ReDoc](https://github.com/Redocly/redoc) documentation. In addition to standard\nOpenAPI syntax we use a few [vendor extensions](https://github.com/Redocly/redoc/blob/master/docs/redoc-vendor-extensions.md).\n\n# Cross-Origin Resource Sharing\nThis API features Cross-Origin Resource Sharing (CORS) implemented in compliance with  [W3C spec](https://www.w3.org/TR/cors/).\nAnd that allows cross-domain communication from the browser.\nAll responses have a wildcard same-origin which makes them completely public and accessible to everyone, including any code on any site.\n\n# Authentication\n\nPetstore offers two forms of authentication:\n  - API Key\n  - OAuth2\nOAuth2 - an open protocol to allow secure authorization in a simple\nand standard method from web, mobile and desktop applications.\n\n<SecurityDefinitions />\n",
              "version": "1.0.0",
              "title": "Swagger Petstore YAML",
              "termsOfService": "http://swagger.io/terms/",
              "contact": {
                "name": "API Support",
                "email": "apiteam@swagger.io",
                "url": "https://github.com/Redocly/redoc"
              },
              "x-logo": {
                "url": "https://redocly.github.io/redoc/petstore-logo.png",
                "altText": "Petstore logo"
              },
              "license": {
                "name": "Apache 2.0",
                "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
              }
            },
            "postman": {
              "name": "Logs out current logged in user session",
              "description": {
                "content": "",
                "type": "text/plain"
              },
              "url": {
                "path": [
                  "user",
                  "logout"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            }
          },
          "source": "@site/api/example.yml",
          "sourceDirName": ".",
          "permalink": "/zh-TW/api/logs-out-current-logged-in-user-session",
          "previous": {
            "title": "Logs user into the system",
            "permalink": "/zh-TW/api/logs-user-into-the-system"
          }
        }
      ]
    }
  },
  "docusaurus-plugin-proxy": {},
  "docusaurus-theme-classic": {},
  "docusaurus-theme-openapi": {},
  "docusaurus-plugin-sass": {},
  "docusaurus-plugin-content-docs": {
    "guide": {
      "loadedVersions": [
        {
          "versionName": "current",
          "label": "Next",
          "banner": null,
          "badge": false,
          "noIndex": false,
          "className": "docs-version-current",
          "path": "/zh-TW/guide",
          "tagsPath": "/zh-TW/guide/tags",
          "isLast": true,
          "routePriority": -1,
          "sidebarFilePath": "/home/ubuntu/code/owlpay/paynow-guideline/sidebars/guide.js",
          "contentPath": "/home/ubuntu/code/owlpay/paynow-guideline/guide",
          "contentPathLocalized": "/home/ubuntu/code/owlpay/paynow-guideline/i18n/zh-TW/docusaurus-plugin-content-docs-guide/current",
          "docs": [
            {
              "unversionedId": "intro",
              "id": "intro",
              "title": "從這裡開始",
              "description": "以下的文件將帶您快速了解 PayNow 系統的操作。",
              "source": "@site/guide/intro.md",
              "sourceDirName": ".",
              "slug": "/intro",
              "permalink": "/zh-TW/guide/intro",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {
                "sidebar_position": 1
              },
              "sidebar": "default",
              "next": {
                "title": "金流服務",
                "permalink": "/zh-TW/guide/payment"
              }
            },
            {
              "unversionedId": "invoice",
              "id": "invoice",
              "title": "發票後台",
              "description": "使用 PayNow 的賣家可使用發票後台處理發票。",
              "source": "@site/guide/invoice.md",
              "sourceDirName": ".",
              "slug": "/invoice",
              "permalink": "/zh-TW/guide/invoice",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 5,
              "frontMatter": {
                "sidebar_position": 5
              }
            },
            {
              "unversionedId": "logistics",
              "id": "logistics",
              "title": "物流後台",
              "description": "使用 PayNow 的賣家可使用物流後台管理商店。",
              "source": "@site/guide/logistics.md",
              "sourceDirName": ".",
              "slug": "/logistics",
              "permalink": "/zh-TW/guide/logistics",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 4,
              "frontMatter": {
                "sidebar_position": 4
              }
            },
            {
              "unversionedId": "payment",
              "id": "payment",
              "title": "金流服務",
              "description": "PayNow 提供多元的線上金流與行動支付服務，讓您收款更便利！",
              "source": "@site/guide/payment.md",
              "sourceDirName": ".",
              "slug": "/payment",
              "permalink": "/zh-TW/guide/payment",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {
                "sidebar_position": 2
              },
              "sidebar": "default",
              "previous": {
                "title": "從這裡開始",
                "permalink": "/zh-TW/guide/intro"
              },
              "next": {
                "title": "從這裡開始",
                "permalink": "/zh-TW/guide/intro"
              }
            },
            {
              "unversionedId": "payment-admin",
              "id": "payment-admin",
              "title": "金流後台",
              "description": "使用 PayNow 的賣家，可使用金流後台管理商店的金流服務。",
              "source": "@site/guide/payment-admin.md",
              "sourceDirName": ".",
              "slug": "/payment-admin",
              "permalink": "/zh-TW/guide/payment-admin",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {
                "sidebar_position": 3
              }
            }
          ],
          "drafts": [],
          "sidebars": {
            "default": [
              {
                "type": "doc",
                "id": "intro"
              },
              {
                "type": "doc",
                "id": "payment"
              },
              {
                "type": "category",
                "label": "Category",
                "items": [
                  {
                    "type": "doc",
                    "id": "intro"
                  },
                  {
                    "type": "doc",
                    "id": "payment"
                  }
                ],
                "collapsed": true,
                "collapsible": true
              }
            ]
          }
        }
      ]
    },
    "tutorial": {
      "loadedVersions": [
        {
          "versionName": "current",
          "label": "Nexta",
          "banner": null,
          "badge": false,
          "noIndex": false,
          "className": "docs-version-current",
          "path": "/zh-TW/tutorial",
          "tagsPath": "/zh-TW/tutorial/tags",
          "isLast": true,
          "routePriority": -1,
          "sidebarFilePath": "/home/ubuntu/code/owlpay/paynow-guideline/sidebars/tutorial.js",
          "contentPath": "/home/ubuntu/code/owlpay/paynow-guideline/tutorial",
          "contentPathLocalized": "/home/ubuntu/code/owlpay/paynow-guideline/i18n/zh-TW/docusaurus-plugin-content-docs-tutorial/current",
          "docs": [
            {
              "unversionedId": "01-intro",
              "id": "01-intro",
              "title": "發票後台",
              "description": "使用 PayNow 的賣家可使用發票後台處理發票。",
              "source": "@site/tutorial/invoice.md",
              "sourceDirName": ".",
              "slug": "/01-intro",
              "permalink": "/zh-TW/tutorial/01-intro",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 5,
              "frontMatter": {
                "id": "01-intro",
                "sidebar_position": 5
              },
              "sidebar": "default",
              "previous": {
                "title": "物流後台",
                "permalink": "/zh-TW/tutorial/logistics"
              }
            },
            {
              "unversionedId": "intro",
              "id": "intro",
              "title": "從這裡開始 zh-TW",
              "description": "以下的文件將帶您快速了解 PayNow 系統的操作。",
              "source": "@site/i18n/zh-TW/docusaurus-plugin-content-docs-tutorial/current/01-intro.md",
              "sourceDirName": ".",
              "slug": "/intro",
              "permalink": "/zh-TW/tutorial/intro",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 1,
              "frontMatter": {},
              "sidebar": "default",
              "previous": {
                "title": "測試第二層的文件",
                "permalink": "/zh-TW/tutorial/test-folder/test-folder-2/intro"
              },
              "next": {
                "title": "金流服務",
                "permalink": "/zh-TW/tutorial/payment"
              }
            },
            {
              "unversionedId": "logistics",
              "id": "logistics",
              "title": "物流後台",
              "description": "使用 PayNow 的賣家可使用物流後台管理商店。",
              "source": "@site/tutorial/logistics.md",
              "sourceDirName": ".",
              "slug": "/logistics",
              "permalink": "/zh-TW/tutorial/logistics",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 4,
              "frontMatter": {
                "sidebar_position": 4
              },
              "sidebar": "default",
              "previous": {
                "title": "金流後台",
                "permalink": "/zh-TW/tutorial/payment-admin"
              },
              "next": {
                "title": "發票後台",
                "permalink": "/zh-TW/tutorial/01-intro"
              }
            },
            {
              "unversionedId": "payment",
              "id": "payment",
              "title": "金流服務",
              "description": "PayNow 提供多元的線上金流與行動支付服務，讓您收款更便利！",
              "source": "@site/tutorial/02-payment.md",
              "sourceDirName": ".",
              "slug": "/payment",
              "permalink": "/zh-TW/tutorial/payment",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 2,
              "frontMatter": {},
              "sidebar": "default",
              "previous": {
                "title": "從這裡開始 zh-TW",
                "permalink": "/zh-TW/tutorial/intro"
              },
              "next": {
                "title": "金流後台",
                "permalink": "/zh-TW/tutorial/payment-admin"
              }
            },
            {
              "unversionedId": "payment-admin",
              "id": "payment-admin",
              "title": "金流後台",
              "description": "使用 PayNow 的賣家，可使用金流後台管理商店的金流服務。",
              "source": "@site/tutorial/03-payment-admin.md",
              "sourceDirName": ".",
              "slug": "/payment-admin",
              "permalink": "/zh-TW/tutorial/payment-admin",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 3,
              "frontMatter": {},
              "sidebar": "default",
              "previous": {
                "title": "金流服務",
                "permalink": "/zh-TW/tutorial/payment"
              },
              "next": {
                "title": "物流後台",
                "permalink": "/zh-TW/tutorial/logistics"
              }
            },
            {
              "unversionedId": "test-folder/index",
              "id": "test-folder/index",
              "title": "第一層資料夾",
              "description": "測試看看多資料夾會怎麼樣",
              "source": "@site/tutorial/test-folder/index.md",
              "sourceDirName": "test-folder",
              "slug": "/test-folder/",
              "permalink": "/zh-TW/tutorial/test-folder/",
              "draft": false,
              "tags": [],
              "version": "current",
              "sidebarPosition": 0,
              "frontMatter": {
                "sidebar_position": 0
              },
              "sidebar": "default",
              "next": {
                "title": "第一層的文件",
                "permalink": "/zh-TW/tutorial/test-folder/intro"
              }
            },
            {
              "unversionedId": "test-folder/intro",
              "id": "test-folder/intro",
              "title": "第一層的文件",
              "description": "第一層資料夾來一篇文章",
              "source": "@site/tutorial/test-folder/intro.md",
              "sourceDirName": "test-folder",
              "slug": "/test-folder/intro",
              "permalink": "/zh-TW/tutorial/test-folder/intro",
              "draft": false,
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "default",
              "previous": {
                "title": "第一層資料夾",
                "permalink": "/zh-TW/tutorial/test-folder/"
              },
              "next": {
                "title": "第二層資料夾",
                "permalink": "/zh-TW/tutorial/test-folder/test-folder-2/"
              }
            },
            {
              "unversionedId": "test-folder/test-folder-2/index",
              "id": "test-folder/test-folder-2/index",
              "title": "第二層資料夾",
              "description": "改用 meta 的方式命名，可以發現 sidebar 跟 這裡的標題不一樣",
              "source": "@site/tutorial/test-folder/test-folder-2/index.md",
              "sourceDirName": "test-folder/test-folder-2",
              "slug": "/test-folder/test-folder-2/",
              "permalink": "/zh-TW/tutorial/test-folder/test-folder-2/",
              "draft": false,
              "tags": [],
              "version": "current",
              "frontMatter": {
                "title": "第二層資料夾"
              },
              "sidebar": "default",
              "previous": {
                "title": "第一層的文件",
                "permalink": "/zh-TW/tutorial/test-folder/intro"
              },
              "next": {
                "title": "測試第二層的文件",
                "permalink": "/zh-TW/tutorial/test-folder/test-folder-2/intro"
              }
            },
            {
              "unversionedId": "test-folder/test-folder-2/intro",
              "id": "test-folder/test-folder-2/intro",
              "title": "測試第二層的文件",
              "description": "也來一篇文件好了",
              "source": "@site/tutorial/test-folder/test-folder-2/intro.md",
              "sourceDirName": "test-folder/test-folder-2",
              "slug": "/test-folder/test-folder-2/intro",
              "permalink": "/zh-TW/tutorial/test-folder/test-folder-2/intro",
              "draft": false,
              "tags": [],
              "version": "current",
              "frontMatter": {},
              "sidebar": "default",
              "previous": {
                "title": "第二層資料夾",
                "permalink": "/zh-TW/tutorial/test-folder/test-folder-2/"
              },
              "next": {
                "title": "從這裡開始 zh-TW",
                "permalink": "/zh-TW/tutorial/intro"
              }
            }
          ],
          "drafts": [],
          "sidebars": {
            "default": [
              {
                "type": "category",
                "label": "第一層資料夾",
                "collapsible": true,
                "collapsed": true,
                "items": [
                  {
                    "type": "doc",
                    "id": "test-folder/intro"
                  },
                  {
                    "type": "category",
                    "label": "第二層資料夾",
                    "collapsible": true,
                    "collapsed": true,
                    "items": [
                      {
                        "type": "doc",
                        "id": "test-folder/test-folder-2/intro"
                      }
                    ],
                    "link": {
                      "type": "doc",
                      "id": "test-folder/test-folder-2/index"
                    }
                  }
                ],
                "link": {
                  "type": "doc",
                  "id": "test-folder/index"
                }
              },
              {
                "type": "doc",
                "id": "intro"
              },
              {
                "type": "doc",
                "id": "payment"
              },
              {
                "type": "doc",
                "id": "payment-admin"
              },
              {
                "type": "doc",
                "id": "logistics"
              },
              {
                "type": "doc",
                "id": "01-intro"
              }
            ]
          }
        }
      ]
    }
  },
  "docusaurus-bootstrap-plugin": {},
  "docusaurus-mdx-fallback-plugin": {}
}